
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000230c  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  20000000  0800230c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000112c  20000200  08002600  00010200  2**9
                  ALLOC
  3 ._usrstack    00001000  2000132c  0800372c  00010200  2**0
                  ALLOC
  4 .debug_info   00006bab  00000000  00000000  000100e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000023e5  00000000  00000000  00016c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    00003e00  00000000  00000000  00019074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000930  00000000  00000000  0001ce74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000918  00000000  00000000  0001d7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002b3b  00000000  00000000  0001e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022f6  00000000  00000000  00020bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000070  00000000  00000000  00022eed  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000033  00000000  00000000  00022f5d  2**0
                  CONTENTS, READONLY
 13 .debug_frame  000014e0  00000000  00000000  00022f90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 6d 04 00 08                             .P. m...

08000008 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000008:	b510      	push	{r4, lr}
	Hw_Led_Toggle(0);
 800000a:	2000      	movs	r0, #0
 800000c:	4c02      	ldr	r4, [pc, #8]	; (8000018 <LED_Tick+0x10>)
 800000e:	47a0      	blx	r4
	Hw_Led_Toggle(1);	
 8000010:	2001      	movs	r0, #1
 8000012:	47a0      	blx	r4
 8000014:	bd10      	pop	{r4, pc}
 8000016:	bf00      	nop
 8000018:	08000b8d 	.word	0x08000b8d

0800001c <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800001c:	b530      	push	{r4, r5, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001e:	4b23      	ldr	r3, [pc, #140]	; (80000ac <main+0x90>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000020:	b085      	sub	sp, #20
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 8000022:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000024:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000026:	4822      	ldr	r0, [pc, #136]	; (80000b0 <main+0x94>)
 8000028:	4780      	blx	r0
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 800002a:	4d22      	ldr	r5, [pc, #136]	; (80000b4 <main+0x98>)
 800002c:	2202      	movs	r2, #2
 800002e:	4b22      	ldr	r3, [pc, #136]	; (80000b8 <main+0x9c>)
 8000030:	4620      	mov	r0, r4
 8000032:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000036:	9400      	str	r4, [sp, #0]
 8000038:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );	
 800003a:	4620      	mov	r0, r4
 800003c:	491f      	ldr	r1, [pc, #124]	; (80000bc <main+0xa0>)
 800003e:	4788      	blx	r1
	Main_Init();


	//-- 버전 출력
	//
	Hw_Uart_PrintEx( HW_UART_COM1, _BOOT_VER_STR_ );
 8000040:	4d1f      	ldr	r5, [pc, #124]	; (80000c0 <main+0xa4>)
 8000042:	4620      	mov	r0, r4
 8000044:	491f      	ldr	r1, [pc, #124]	; (80000c4 <main+0xa8>)
 8000046:	47a8      	blx	r5
	

	if( Ap_ST32BL_RunBoot == TRUE )
 8000048:	4a1f      	ldr	r2, [pc, #124]	; (80000c8 <main+0xac>)
	{

		Hw_Uart_PrintEx( HW_UART_COM1, "Ready to download..\r\n");
 800004a:	4620      	mov	r0, r4
	//-- 버전 출력
	//
	Hw_Uart_PrintEx( HW_UART_COM1, _BOOT_VER_STR_ );
	

	if( Ap_ST32BL_RunBoot == TRUE )
 800004c:	7813      	ldrb	r3, [r2, #0]
 800004e:	2b01      	cmp	r3, #1
 8000050:	d127      	bne.n	80000a2 <main+0x86>
	{

		Hw_Uart_PrintEx( HW_UART_COM1, "Ready to download..\r\n");
 8000052:	491e      	ldr	r1, [pc, #120]	; (80000cc <main+0xb0>)
 8000054:	47a8      	blx	r5
		//-- 먼저 명령을 보낸 포트로 다운로드 시작 
		//
		#if 1
		while(1)
		{
			if( HW_VCOM_Q_VAILD(0) > 0 )
 8000056:	2000      	movs	r0, #0
 8000058:	4a1d      	ldr	r2, [pc, #116]	; (80000d0 <main+0xb4>)
 800005a:	4790      	blx	r2
 800005c:	b150      	cbz	r0, 8000074 <main+0x58>
			{
				Hw_VCom_Q_Pop( 0, &Uart_GetData );
 800005e:	2000      	movs	r0, #0
 8000060:	f10d 010f 	add.w	r1, sp, #15
 8000064:	4b1b      	ldr	r3, [pc, #108]	; (80000d4 <main+0xb8>)
 8000066:	4798      	blx	r3

				if( Uart_GetData == STM32_CMD_INIT )
 8000068:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800006c:	287f      	cmp	r0, #127	; 0x7f
 800006e:	d101      	bne.n	8000074 <main+0x58>
				{
					Ap_ST32BL_UartPort = HW_UART_VCOM;
 8000070:	2005      	movs	r0, #5
 8000072:	e00e      	b.n	8000092 <main+0x76>
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
					break;
				}
			}

			if( HW_UART_Q_VAILD(HW_UART_COM1) > 0 )
 8000074:	2000      	movs	r0, #0
 8000076:	4918      	ldr	r1, [pc, #96]	; (80000d8 <main+0xbc>)
 8000078:	4788      	blx	r1
 800007a:	2800      	cmp	r0, #0
 800007c:	ddeb      	ble.n	8000056 <main+0x3a>
			{
				Hw_Uart_Q_Pop( HW_UART_COM1, &Uart_GetData );
 800007e:	2000      	movs	r0, #0
 8000080:	f10d 010f 	add.w	r1, sp, #15
 8000084:	4a15      	ldr	r2, [pc, #84]	; (80000dc <main+0xc0>)
 8000086:	4790      	blx	r2

				if( Uart_GetData == STM32_CMD_INIT )
 8000088:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800008c:	2b7f      	cmp	r3, #127	; 0x7f
 800008e:	d1e2      	bne.n	8000056 <main+0x3a>
				{
					Ap_ST32BL_UartPort = HW_UART_COM1;
 8000090:	2000      	movs	r0, #0
 8000092:	4913      	ldr	r1, [pc, #76]	; (80000e0 <main+0xc4>)
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000094:	4a13      	ldr	r2, [pc, #76]	; (80000e4 <main+0xc8>)
			{
				Hw_Uart_Q_Pop( HW_UART_COM1, &Uart_GetData );

				if( Uart_GetData == STM32_CMD_INIT )
				{
					Ap_ST32BL_UartPort = HW_UART_COM1;
 8000096:	7008      	strb	r0, [r1, #0]
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000098:	2079      	movs	r0, #121	; 0x79
 800009a:	4790      	blx	r2
					break;
				}
			}	
		}
		#endif
		Ap_ST32BL_Main();
 800009c:	4b12      	ldr	r3, [pc, #72]	; (80000e8 <main+0xcc>)
 800009e:	4798      	blx	r3
 80000a0:	e001      	b.n	80000a6 <main+0x8a>
	}
	else
	{		
		Ap_ST32BL_JumpToApp(0);
 80000a2:	4912      	ldr	r1, [pc, #72]	; (80000ec <main+0xd0>)
 80000a4:	4788      	blx	r1
	}
    
    return 0;
}
 80000a6:	2000      	movs	r0, #0
 80000a8:	b005      	add	sp, #20
 80000aa:	bd30      	pop	{r4, r5, pc}
 80000ac:	08000565 	.word	0x08000565
 80000b0:	080000f1 	.word	0x080000f1
 80000b4:	080009c9 	.word	0x080009c9
 80000b8:	08000009 	.word	0x08000009
 80000bc:	080009e5 	.word	0x080009e5
 80000c0:	080007f1 	.word	0x080007f1
 80000c4:	08002228 	.word	0x08002228
 80000c8:	200002ca 	.word	0x200002ca
 80000cc:	08002243 	.word	0x08002243
 80000d0:	08000c65 	.word	0x08000c65
 80000d4:	08000ccd 	.word	0x08000ccd
 80000d8:	08000a59 	.word	0x08000a59
 80000dc:	08000abd 	.word	0x08000abd
 80000e0:	200002c9 	.word	0x200002c9
 80000e4:	08000179 	.word	0x08000179
 80000e8:	08000349 	.word	0x08000349
 80000ec:	0800030d 	.word	0x0800030d

080000f0 <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 80000f0:	b508      	push	{r3, lr}
	Ap_ST32BL_Init();
 80000f2:	4b01      	ldr	r3, [pc, #4]	; (80000f8 <Ap_Init+0x8>)
 80000f4:	4798      	blx	r3
 80000f6:	bd08      	pop	{r3, pc}
 80000f8:	080000fd 	.word	0x080000fd

080000fc <Ap_ST32BL_Init>:
	u32 i;


	//-- GPIO 입력핀으로 부트로더 실행 검사  
	//
	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
 80000fc:	4b18      	ldr	r3, [pc, #96]	; (8000160 <Ap_ST32BL_Init+0x64>)
 80000fe:	681a      	ldr	r2, [r3, #0]
 8000100:	f022 000f 	bic.w	r0, r2, #15
 8000104:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
 8000106:	6819      	ldr	r1, [r3, #0]
 8000108:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
 800010a:	681a      	ldr	r2, [r3, #0]
 800010c:	f042 0008 	orr.w	r0, r2, #8
 8000110:	6018      	str	r0, [r3, #0]
		
	CLR_BIT( REG_GPIOB_ODR, 0 );
 8000112:	68d9      	ldr	r1, [r3, #12]
 8000114:	f021 0201 	bic.w	r2, r1, #1
 8000118:	60da      	str	r2, [r3, #12]


	if( IS_SET_BIT(REG_GPIOB_IDR, 0) )
 800011a:	3308      	adds	r3, #8
 800011c:	681b      	ldr	r3, [r3, #0]
 800011e:	4911      	ldr	r1, [pc, #68]	; (8000164 <Ap_ST32BL_Init+0x68>)
 8000120:	f013 0001 	ands.w	r0, r3, #1
	{
		Ap_ST32BL_RunBoot = TRUE;
 8000124:	bf18      	it	ne
 8000126:	2001      	movne	r0, #1
	}


	//-- 워치독 리셋이면 부트로더 실행 
	//
	if( REG_RCC_CSR & (1<<29) )
 8000128:	4b0f      	ldr	r3, [pc, #60]	; (8000168 <Ap_ST32BL_Init+0x6c>)
	{
		Ap_ST32BL_RunBoot = TRUE;
	}
	else
	{
		Ap_ST32BL_RunBoot = FALSE;
 800012a:	7008      	strb	r0, [r1, #0]
	}


	//-- 워치독 리셋이면 부트로더 실행 
	//
	if( REG_RCC_CSR & (1<<29) )
 800012c:	681a      	ldr	r2, [r3, #0]
 800012e:	0092      	lsls	r2, r2, #2
 8000130:	d505      	bpl.n	800013e <Ap_ST32BL_Init+0x42>
	{
		Ap_ST32BL_RunBoot = TRUE;
 8000132:	490c      	ldr	r1, [pc, #48]	; (8000164 <Ap_ST32BL_Init+0x68>)
 8000134:	2001      	movs	r0, #1

		REG_RCC_CSR = (1<<24);		// Clear Bit
 8000136:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000

	//-- 워치독 리셋이면 부트로더 실행 
	//
	if( REG_RCC_CSR & (1<<29) )
	{
		Ap_ST32BL_RunBoot = TRUE;
 800013a:	7008      	strb	r0, [r1, #0]

		REG_RCC_CSR = (1<<24);		// Clear Bit
 800013c:	601a      	str	r2, [r3, #0]
	}


	//-- 펌웨어가 없어도 부트로더 실행
	//
	if( *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS+ 4) == 0xFFFFFFFF )
 800013e:	4b0b      	ldr	r3, [pc, #44]	; (800016c <Ap_ST32BL_Init+0x70>)
 8000140:	6818      	ldr	r0, [r3, #0]
 8000142:	1c43      	adds	r3, r0, #1
 8000144:	d102      	bne.n	800014c <Ap_ST32BL_Init+0x50>
	{
		Ap_ST32BL_RunBoot = TRUE;
 8000146:	4a07      	ldr	r2, [pc, #28]	; (8000164 <Ap_ST32BL_Init+0x68>)
 8000148:	2101      	movs	r1, #1
 800014a:	7011      	strb	r1, [r2, #0]
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_Init( void )
{
 800014c:	2300      	movs	r3, #0
	}	


	for( i=0; i<128; i++ )
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 800014e:	4908      	ldr	r1, [pc, #32]	; (8000170 <Ap_ST32BL_Init+0x74>)
 8000150:	2000      	movs	r0, #0
 8000152:	5458      	strb	r0, [r3, r1]
	{
		Ap_ST32BL_RunBoot = TRUE;
	}	


	for( i=0; i<128; i++ )
 8000154:	3301      	adds	r3, #1
 8000156:	2b80      	cmp	r3, #128	; 0x80
 8000158:	d1f9      	bne.n	800014e <Ap_ST32BL_Init+0x52>
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
	}

	Ap_ST32BL_UartPort = HW_UART_COM1;	
 800015a:	4a06      	ldr	r2, [pc, #24]	; (8000174 <Ap_ST32BL_Init+0x78>)
 800015c:	7010      	strb	r0, [r2, #0]
 800015e:	4770      	bx	lr
 8000160:	40010c00 	.word	0x40010c00
 8000164:	200002ca 	.word	0x200002ca
 8000168:	40021024 	.word	0x40021024
 800016c:	08003004 	.word	0x08003004
 8000170:	200002cb 	.word	0x200002cb
 8000174:	200002c9 	.word	0x200002c9

08000178 <Ap_ST32BL_SendByte>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_SendByte( u8 ByteData )
{
 8000178:	b508      	push	{r3, lr}
	Hw_Uart_Putch( Ap_ST32BL_UartPort, ByteData );
 800017a:	4b03      	ldr	r3, [pc, #12]	; (8000188 <Ap_ST32BL_SendByte+0x10>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_SendByte( u8 ByteData )
{
 800017c:	4601      	mov	r1, r0
	Hw_Uart_Putch( Ap_ST32BL_UartPort, ByteData );
 800017e:	4a03      	ldr	r2, [pc, #12]	; (800018c <Ap_ST32BL_SendByte+0x14>)
 8000180:	7818      	ldrb	r0, [r3, #0]
 8000182:	4790      	blx	r2
 8000184:	bd08      	pop	{r3, pc}
 8000186:	bf00      	nop
 8000188:	200002c9 	.word	0x200002c9
 800018c:	080007b5 	.word	0x080007b5

08000190 <Ap_ST32BL_ReceiveByte>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_ReceiveByte( void )
{
 8000190:	b508      	push	{r3, lr}
	Hw_Uart_Getch( Ap_ST32BL_UartPort );
 8000192:	4b02      	ldr	r3, [pc, #8]	; (800019c <Ap_ST32BL_ReceiveByte+0xc>)
 8000194:	4902      	ldr	r1, [pc, #8]	; (80001a0 <Ap_ST32BL_ReceiveByte+0x10>)
 8000196:	7818      	ldrb	r0, [r3, #0]
 8000198:	4788      	blx	r1
}
 800019a:	bd08      	pop	{r3, pc}
 800019c:	200002c9 	.word	0x200002c9
 80001a0:	08000779 	.word	0x08000779

080001a4 <Ap_ST32BL_WaitCmd>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WaitCmd( void )
{
 80001a4:	b538      	push	{r3, r4, r5, lr}
	u8 Ch;
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();
 80001a6:	4d13      	ldr	r5, [pc, #76]	; (80001f4 <Ap_ST32BL_WaitCmd+0x50>)
 80001a8:	47a8      	blx	r5

	switch( Cmd )
 80001aa:	2831      	cmp	r0, #49	; 0x31
 80001ac:	462b      	mov	r3, r5
{
	u8 Ch;
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();
 80001ae:	4604      	mov	r4, r0
 80001b0:	4d11      	ldr	r5, [pc, #68]	; (80001f8 <Ap_ST32BL_WaitCmd+0x54>)

	switch( Cmd )
 80001b2:	d015      	beq.n	80001e0 <Ap_ST32BL_WaitCmd+0x3c>
 80001b4:	d808      	bhi.n	80001c8 <Ap_ST32BL_WaitCmd+0x24>
 80001b6:	2802      	cmp	r0, #2
 80001b8:	d012      	beq.n	80001e0 <Ap_ST32BL_WaitCmd+0x3c>
 80001ba:	d801      	bhi.n	80001c0 <Ap_ST32BL_WaitCmd+0x1c>
 80001bc:	b180      	cbz	r0, 80001e0 <Ap_ST32BL_WaitCmd+0x3c>
 80001be:	e013      	b.n	80001e8 <Ap_ST32BL_WaitCmd+0x44>
 80001c0:	2811      	cmp	r0, #17
 80001c2:	d00d      	beq.n	80001e0 <Ap_ST32BL_WaitCmd+0x3c>
 80001c4:	2821      	cmp	r0, #33	; 0x21
 80001c6:	e00a      	b.n	80001de <Ap_ST32BL_WaitCmd+0x3a>
 80001c8:	2873      	cmp	r0, #115	; 0x73
 80001ca:	d009      	beq.n	80001e0 <Ap_ST32BL_WaitCmd+0x3c>
 80001cc:	d804      	bhi.n	80001d8 <Ap_ST32BL_WaitCmd+0x34>
 80001ce:	f1a0 0243 	sub.w	r2, r0, #67	; 0x43
 80001d2:	2a01      	cmp	r2, #1
 80001d4:	d808      	bhi.n	80001e8 <Ap_ST32BL_WaitCmd+0x44>
 80001d6:	e003      	b.n	80001e0 <Ap_ST32BL_WaitCmd+0x3c>
 80001d8:	287f      	cmp	r0, #127	; 0x7f
 80001da:	d002      	beq.n	80001e2 <Ap_ST32BL_WaitCmd+0x3e>
 80001dc:	28ff      	cmp	r0, #255	; 0xff
 80001de:	d103      	bne.n	80001e8 <Ap_ST32BL_WaitCmd+0x44>
		case STM32_CMD_WRITE_FLASH:
		case STM32_CMD_WRITE_UNPROTECT:
		case STM32_CMD_READ_FLASH:
		case STM32_CMD_GO:
		case 0xFF:
			CmdC = Ap_ST32BL_ReceiveByte();
 80001e0:	4798      	blx	r3

			Ap_ST32BL_SendByte(STM32_COMM_ACK);				
 80001e2:	2079      	movs	r0, #121	; 0x79
 80001e4:	47a8      	blx	r5
			break;
 80001e6:	e002      	b.n	80001ee <Ap_ST32BL_WaitCmd+0x4a>

		default:
			Ap_ST32BL_SendByte(STM32_COMM_NACK);
 80001e8:	201f      	movs	r0, #31
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <Ap_ST32BL_WaitCmd+0x54>)
 80001ec:	4788      	blx	r1
			break;
	}


	return Cmd;
}
 80001ee:	4620      	mov	r0, r4
 80001f0:	bd38      	pop	{r3, r4, r5, pc}
 80001f2:	bf00      	nop
 80001f4:	08000191 	.word	0x08000191
 80001f8:	08000179 	.word	0x08000179

080001fc <Ap_ST32BL_EraseFlash>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_EraseFlash( void )
{
 80001fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32 i;

	
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 80001fe:	2304      	movs	r3, #4

	FLASH_Unlock();
 8000200:	480e      	ldr	r0, [pc, #56]	; (800023c <Ap_ST32BL_EraseFlash+0x40>)
	u32 i;

	
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 8000202:	f88d 3007 	strb.w	r3, [sp, #7]

	FLASH_Unlock();
 8000206:	4780      	blx	r0
	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
 8000208:	2035      	movs	r0, #53	; 0x35
 800020a:	490d      	ldr	r1, [pc, #52]	; (8000240 <Ap_ST32BL_EraseFlash+0x44>)
 800020c:	4788      	blx	r1


	for( i=0; i<128; i++ )
 800020e:	2200      	movs	r2, #0
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 8000210:	4d0c      	ldr	r5, [pc, #48]	; (8000244 <Ap_ST32BL_EraseFlash+0x48>)
 8000212:	2400      	movs	r4, #0
 8000214:	5554      	strb	r4, [r2, r5]

	FLASH_Unlock();
	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);


	for( i=0; i<128; i++ )
 8000216:	3201      	adds	r2, #1
 8000218:	2a80      	cmp	r2, #128	; 0x80
 800021a:	d1f9      	bne.n	8000210 <Ap_ST32BL_EraseFlash+0x14>
	}

	PageCount = 0;


	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);
 800021c:	480a      	ldr	r0, [pc, #40]	; (8000248 <Ap_ST32BL_EraseFlash+0x4c>)
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <Ap_ST32BL_EraseFlash+0x50>)
 8000220:	4798      	blx	r3
 8000222:	f88d 0007 	strb.w	r0, [sp, #7]

	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;

	if( FLASHStatus != FLASH_COMPLETE )
 8000226:	f89d 1007 	ldrb.w	r1, [sp, #7]
	PageCount = 0;


	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);

	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 800022a:	2001      	movs	r0, #1

	if( FLASHStatus != FLASH_COMPLETE )
 800022c:	2904      	cmp	r1, #4
	PageCount = 0;


	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);

	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 800022e:	7028      	strb	r0, [r5, #0]

	if( FLASHStatus != FLASH_COMPLETE )
 8000230:	d002      	beq.n	8000238 <Ap_ST32BL_EraseFlash+0x3c>
	{
		FLASH_Lock();
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <Ap_ST32BL_EraseFlash+0x54>)
 8000234:	4780      	blx	r0
		Ret = FALSE;
 8000236:	4620      	mov	r0, r4
	}

	return Ret;
}
 8000238:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800023a:	bf00      	nop
 800023c:	08002105 	.word	0x08002105
 8000240:	0800212d 	.word	0x0800212d
 8000244:	200002cb 	.word	0x200002cb
 8000248:	08003000 	.word	0x08003000
 800024c:	080021e5 	.word	0x080021e5
 8000250:	0800211d 	.word	0x0800211d

08000254 <Ap_ST32BL_CheckFlashSector>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_CheckFlashSector( u32 Address )
{
 8000254:	b573      	push	{r0, r1, r4, r5, r6, lr}
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 8000256:	4911      	ldr	r1, [pc, #68]	; (800029c <Ap_ST32BL_CheckFlashSector+0x48>)
	u8  Ret = TRUE;
	u32 PageCount;

	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 8000258:	2304      	movs	r3, #4


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 800025a:	4288      	cmp	r0, r1
	u8  Ret = TRUE;
	u32 PageCount;

	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 800025c:	f88d 3007 	strb.w	r3, [sp, #7]


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 8000260:	d919      	bls.n	8000296 <Ap_ST32BL_CheckFlashSector+0x42>


	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;
 8000262:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8000266:	f5a4 5040 	sub.w	r0, r4, #12288	; 0x3000


	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
 800026a:	4e0d      	ldr	r6, [pc, #52]	; (80002a0 <Ap_ST32BL_CheckFlashSector+0x4c>)


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;


	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;
 800026c:	0a84      	lsrs	r4, r0, #10


	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
 800026e:	5d35      	ldrb	r5, [r6, r4]
 8000270:	b10d      	cbz	r5, 8000276 <Ap_ST32BL_CheckFlashSector+0x22>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_CheckFlashSector( u32 Address )
{
	u8  Ret = TRUE;
 8000272:	2001      	movs	r0, #1
 8000274:	e010      	b.n	8000298 <Ap_ST32BL_CheckFlashSector+0x44>
	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;


	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
	{
		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCount));
 8000276:	f504 3200 	add.w	r2, r4, #131072	; 0x20000
 800027a:	320c      	adds	r2, #12
 800027c:	0290      	lsls	r0, r2, #10
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <Ap_ST32BL_CheckFlashSector+0x50>)
 8000280:	4798      	blx	r3
 8000282:	f88d 0007 	strb.w	r0, [sp, #7]

		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;

		if( FLASHStatus != FLASH_COMPLETE )
 8000286:	f89d 0007 	ldrb.w	r0, [sp, #7]

	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
	{
		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCount));

		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 800028a:	2101      	movs	r1, #1

		if( FLASHStatus != FLASH_COMPLETE )
 800028c:	2804      	cmp	r0, #4

	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
	{
		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCount));

		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 800028e:	5531      	strb	r1, [r6, r4]

		if( FLASHStatus != FLASH_COMPLETE )
 8000290:	d0ef      	beq.n	8000272 <Ap_ST32BL_CheckFlashSector+0x1e>
		{
			FLASH_Lock();
 8000292:	4a05      	ldr	r2, [pc, #20]	; (80002a8 <Ap_ST32BL_CheckFlashSector+0x54>)
 8000294:	4790      	blx	r2
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 8000296:	2000      	movs	r0, #0
		}
	}


	return Ret;
}
 8000298:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 800029a:	bf00      	nop
 800029c:	08002fff 	.word	0x08002fff
 80002a0:	200002cb 	.word	0x200002cb
 80002a4:	080021e5 	.word	0x080021e5
 80002a8:	0800211d 	.word	0x0800211d

080002ac <Ap_ST32BL_WriteFlash>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
{
 80002ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	u32 DataIndex;
	u8	Ret = TRUE;
	volatile FLASH_Status FLASHStatus;


	WriteSize = DataSize / 4;	// 32Bit로 변경 
 80002b0:	0895      	lsrs	r5, r2, #2
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
{
 80002b2:	4688      	mov	r8, r1
	if( (WriteSize%4) > 0 ) WriteSize++;


	//-- 섹터가 지워졌는지 검사
	//
	if( Ap_ST32BL_CheckFlashSector(Address) == FALSE )
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <Ap_ST32BL_WriteFlash+0x58>)
	volatile FLASH_Status FLASHStatus;


	WriteSize = DataSize / 4;	// 32Bit로 변경 

	if( (WriteSize%4) > 0 ) WriteSize++;
 80002b6:	07a9      	lsls	r1, r5, #30
 80002b8:	bf18      	it	ne
 80002ba:	3501      	addne	r5, #1
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
{
 80002bc:	4607      	mov	r7, r0
	if( (WriteSize%4) > 0 ) WriteSize++;


	//-- 섹터가 지워졌는지 검사
	//
	if( Ap_ST32BL_CheckFlashSector(Address) == FALSE )
 80002be:	4798      	blx	r3
 80002c0:	b110      	cbz	r0, 80002c8 <Ap_ST32BL_WriteFlash+0x1c>
 80002c2:	4644      	mov	r4, r8
 80002c4:	2600      	movs	r6, #0
 80002c6:	e018      	b.n	80002fa <Ap_ST32BL_WriteFlash+0x4e>
	{
		return FALSE;
 80002c8:	2000      	movs	r0, #0
 80002ca:	e019      	b.n	8000300 <Ap_ST32BL_WriteFlash+0x54>
	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 80002cc:	7860      	ldrb	r0, [r4, #1]
		WriteData |= pData[ DataIndex++ ] << 16;
 80002ce:	78a1      	ldrb	r1, [r4, #2]
	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 80002d0:	0203      	lsls	r3, r0, #8

	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
 80002d2:	7822      	ldrb	r2, [r4, #0]
		WriteData |= pData[ DataIndex++ ] << 8;
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		WriteData |= pData[ DataIndex++ ] << 16;
		WriteData |= pData[ DataIndex++ ] << 24;
 80002d8:	78e1      	ldrb	r1, [r4, #3]

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
		WriteData |= pData[ DataIndex++ ] << 16;
 80002da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
     TITLE   : Ap_ST32BL_WriteFlash
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
 80002de:	ebc8 0207 	rsb	r2, r8, r7
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
		WriteData |= pData[ DataIndex++ ] << 16;
		WriteData |= pData[ DataIndex++ ] << 24;

		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);
 80002e2:	1910      	adds	r0, r2, r4
 80002e4:	4319      	orrs	r1, r3
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <Ap_ST32BL_WriteFlash+0x5c>)
 80002e8:	4798      	blx	r3
 80002ea:	f88d 0007 	strb.w	r0, [sp, #7]

		if( FLASHStatus != FLASH_COMPLETE )
 80002ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80002f2:	3404      	adds	r4, #4
 80002f4:	2804      	cmp	r0, #4
 80002f6:	d1e7      	bne.n	80002c8 <Ap_ST32BL_WriteFlash+0x1c>
	}


	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
 80002f8:	3601      	adds	r6, #1
 80002fa:	42ae      	cmp	r6, r5
 80002fc:	d1e6      	bne.n	80002cc <Ap_ST32BL_WriteFlash+0x20>
	u32 StartAddress = Address;
	u32 WriteSize;
	u32 WriteData;
	u32 i;
	u32 DataIndex;
	u8	Ret = TRUE;
 80002fe:	2001      	movs	r0, #1
			break;
		}
	}

	return Ret;
}
 8000300:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 8000304:	08000255 	.word	0x08000255
 8000308:	08002199 	.word	0x08002199

0800030c <Ap_ST32BL_JumpToApp>:
	u32 	  RegData;

	//JumpToAddress = (pFunction)(HW_ST32BL_FLASH_START_ADDRESS + 4);


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <Ap_ST32BL_JumpToApp+0x28>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_JumpToApp( u32 Address )
{
 800030e:	b510      	push	{r4, lr}

	JumpToApp = (pFunction) JumpAddress;


	//Lb_printf("jump..\n");
	Hw_Timer_Delay_ms(100);
 8000310:	2064      	movs	r0, #100	; 0x64
 8000312:	4909      	ldr	r1, [pc, #36]	; (8000338 <Ap_ST32BL_JumpToApp+0x2c>)


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
	

	JumpToApp = (pFunction) JumpAddress;
 8000314:	681c      	ldr	r4, [r3, #0]


	//Lb_printf("jump..\n");
	Hw_Timer_Delay_ms(100);
 8000316:	4788      	blx	r1

	//REG_RCC_AHBENR  = 0x00000014;
	//REG_RCC_APB1ENR = 0x00000000;
	//REG_RCC_APB2ENR = 0x00000000;	

	PowerOff();
 8000318:	4808      	ldr	r0, [pc, #32]	; (800033c <Ap_ST32BL_JumpToApp+0x30>)
 800031a:	4780      	blx	r0

    REG_SCB_VTOR = (uint32_t)0x08000000;     /* Vector Table Relocation in Internal FLASH. */
#endif


	REG_RCC_APB1RSTR = 0xFFFFFFFF;
 800031c:	4908      	ldr	r1, [pc, #32]	; (8000340 <Ap_ST32BL_JumpToApp+0x34>)
	REG_RCC_APB2RSTR = 0xFFFFFFFF;
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <Ap_ST32BL_JumpToApp+0x38>)

    REG_SCB_VTOR = (uint32_t)0x08000000;     /* Vector Table Relocation in Internal FLASH. */
#endif


	REG_RCC_APB1RSTR = 0xFFFFFFFF;
 8000320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	REG_RCC_APB2RSTR = 0xFFFFFFFF;
	REG_RCC_APB1RSTR = 0x00000000;
 8000324:	2000      	movs	r0, #0

    REG_SCB_VTOR = (uint32_t)0x08000000;     /* Vector Table Relocation in Internal FLASH. */
#endif


	REG_RCC_APB1RSTR = 0xFFFFFFFF;
 8000326:	600a      	str	r2, [r1, #0]
	REG_RCC_APB2RSTR = 0xFFFFFFFF;
 8000328:	601a      	str	r2, [r3, #0]
	REG_RCC_APB1RSTR = 0x00000000;
 800032a:	6008      	str	r0, [r1, #0]
	REG_RCC_APB2RSTR = 0x00000000;
 800032c:	6018      	str	r0, [r3, #0]
    /* Disable all interrupts and clear pending bits  */
    //REG_RCC_CIR = 0x009F0000;



	JumpToApp();
 800032e:	47a0      	blx	r4
 8000330:	bd10      	pop	{r4, pc}
 8000332:	bf00      	nop
 8000334:	08003004 	.word	0x08003004
 8000338:	080009f9 	.word	0x080009f9
 800033c:	08001125 	.word	0x08001125
 8000340:	40021010 	.word	0x40021010
 8000344:	4002100c 	.word	0x4002100c

08000348 <Ap_ST32BL_Main>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_Main( void )
{
 8000348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800034c:	b0cd      	sub	sp, #308	; 0x134
	while(1)
	{
		//Hw_Uart_Printf(HW_UART_VCOM, "ST32BL\n");
		//Hw_Timer_Delay_ms(500);

		Cmd = Ap_ST32BL_WaitCmd();
 800034e:	4b40      	ldr	r3, [pc, #256]	; (8000450 <Ap_ST32BL_Main+0x108>)
 8000350:	4798      	blx	r3
		{

		}


		if( Cmd == STM32_CMD_GET_COMMAND )
 8000352:	b918      	cbnz	r0, 800035c <Ap_ST32BL_Main+0x14>
		{
			Ap_ST32BL_SendByte(0x00);
 8000354:	4f3f      	ldr	r7, [pc, #252]	; (8000454 <Ap_ST32BL_Main+0x10c>)
 8000356:	47b8      	blx	r7
			Ap_ST32BL_SendByte(0x22);
 8000358:	2022      	movs	r0, #34	; 0x22
 800035a:	e007      	b.n	800036c <Ap_ST32BL_Main+0x24>
			Ap_ST32BL_SendByte(STM32_COMM_ACK);
		}


		if( Cmd == STM32_CMD_GET_ID )
 800035c:	2802      	cmp	r0, #2
 800035e:	d109      	bne.n	8000374 <Ap_ST32BL_Main+0x2c>
		{
			Ap_ST32BL_SendByte(0x01);
 8000360:	2001      	movs	r0, #1
 8000362:	4f3c      	ldr	r7, [pc, #240]	; (8000454 <Ap_ST32BL_Main+0x10c>)
 8000364:	47b8      	blx	r7
			Ap_ST32BL_SendByte(0x04);
 8000366:	2004      	movs	r0, #4
 8000368:	47b8      	blx	r7
			Ap_ST32BL_SendByte(0x10);
 800036a:	2010      	movs	r0, #16
 800036c:	47b8      	blx	r7
			Ap_ST32BL_SendByte(STM32_COMM_ACK);			
 800036e:	2079      	movs	r0, #121	; 0x79
 8000370:	47b8      	blx	r7
 8000372:	e7ec      	b.n	800034e <Ap_ST32BL_Main+0x6>
		}


		if( Cmd == STM32_CMD_ERASE_FLASH )
 8000374:	2843      	cmp	r0, #67	; 0x43
 8000376:	d10c      	bne.n	8000392 <Ap_ST32BL_Main+0x4a>
		{
			Resp[0] = Ap_ST32BL_ReceiveByte();
 8000378:	4e37      	ldr	r6, [pc, #220]	; (8000458 <Ap_ST32BL_Main+0x110>)
 800037a:	47b0      	blx	r6
 800037c:	f88d 0004 	strb.w	r0, [sp, #4]
			Resp[1] = Ap_ST32BL_ReceiveByte();
 8000380:	47b0      	blx	r6


			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000382:	4a36      	ldr	r2, [pc, #216]	; (800045c <Ap_ST32BL_Main+0x114>)


		if( Cmd == STM32_CMD_ERASE_FLASH )
		{
			Resp[0] = Ap_ST32BL_ReceiveByte();
			Resp[1] = Ap_ST32BL_ReceiveByte();
 8000384:	f88d 0005 	strb.w	r0, [sp, #5]


			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000388:	4790      	blx	r2
 800038a:	2801      	cmp	r0, #1
 800038c:	d13a      	bne.n	8000404 <Ap_ST32BL_Main+0xbc>
 800038e:	2079      	movs	r0, #121	; 0x79
 8000390:	e039      	b.n	8000406 <Ap_ST32BL_Main+0xbe>
		}




		if( Cmd == STM32_CMD_WRITE_FLASH )
 8000392:	2831      	cmp	r0, #49	; 0x31
 8000394:	d13c      	bne.n	8000410 <Ap_ST32BL_Main+0xc8>
 8000396:	2500      	movs	r5, #0
 8000398:	462e      	mov	r6, r5
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 800039a:	4f2f      	ldr	r7, [pc, #188]	; (8000458 <Ap_ST32BL_Main+0x110>)
 800039c:	47b8      	blx	r7
 800039e:	ac01      	add	r4, sp, #4
 80003a0:	5530      	strb	r0, [r6, r4]
		{

			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
 80003a2:	3601      	adds	r6, #1
 80003a4:	2e04      	cmp	r6, #4
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
 80003a6:	ea85 0500 	eor.w	r5, r5, r0
		{

			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
 80003aa:	d1f6      	bne.n	800039a <Ap_ST32BL_Main+0x52>
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 80003ac:	47b8      	blx	r7

			Address  = Resp[0] << 24;
 80003ae:	f894 9000 	ldrb.w	r9, [r4]
			Address |= Resp[1] << 16;
 80003b2:	7863      	ldrb	r3, [r4, #1]
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
 80003b4:	ea4f 6209 	mov.w	r2, r9, lsl #24
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 80003b8:	78a7      	ldrb	r7, [r4, #2]
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
 80003ba:	ea42 4103 	orr.w	r1, r2, r3, lsl #16
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;
 80003be:	78e4      	ldrb	r4, [r4, #3]
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 80003c0:	ea41 2607 	orr.w	r6, r1, r7, lsl #8

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Addrr %x %x %x %x %x %x\r\n", Resp[0], Resp[1], Resp[2], Resp[3], CheckSum, CheckSumCalc );
			#endif		

			if( CheckSum == CheckSumCalc )
 80003c4:	42a8      	cmp	r0, r5
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;
 80003c6:	ea46 0904 	orr.w	r9, r6, r4
 80003ca:	4d22      	ldr	r5, [pc, #136]	; (8000454 <Ap_ST32BL_Main+0x10c>)

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Addrr %x %x %x %x %x %x\r\n", Resp[0], Resp[1], Resp[2], Resp[3], CheckSum, CheckSumCalc );
			#endif		

			if( CheckSum == CheckSumCalc )
 80003cc:	d11e      	bne.n	800040c <Ap_ST32BL_Main+0xc4>
			{
				Ap_ST32BL_SendByte(STM32_COMM_ACK);
 80003ce:	2079      	movs	r0, #121	; 0x79
				Hw_Uart_Printf(HW_UART_COM1, "ACK\r\n");
				#endif	
			}
			else
			{
				Ap_ST32BL_SendByte(STM32_COMM_NACK);	
 80003d0:	47a8      	blx	r5


			//-- Receive Data
			//
			CheckSumCalc = 0;
			Length  = Ap_ST32BL_ReceiveByte();
 80003d2:	4821      	ldr	r0, [pc, #132]	; (8000458 <Ap_ST32BL_Main+0x110>)
 80003d4:	4780      	blx	r0

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 80003d6:	2500      	movs	r5, #0


			//-- Receive Data
			//
			CheckSumCalc = 0;
			Length  = Ap_ST32BL_ReceiveByte();
 80003d8:	4604      	mov	r4, r0
			CheckSumCalc ^= Length;
			Length++;
 80003da:	1c46      	adds	r6, r0, #1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 80003dc:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8000458 <Ap_ST32BL_Main+0x110>
 80003e0:	47c0      	blx	r8
 80003e2:	af01      	add	r7, sp, #4
 80003e4:	55e8      	strb	r0, [r5, r7]

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 80003e6:	3501      	adds	r5, #1
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
 80003e8:	4044      	eors	r4, r0

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 80003ea:	42b5      	cmp	r5, r6
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
 80003ec:	b2e4      	uxtb	r4, r4

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 80003ee:	d3f5      	bcc.n	80003dc <Ap_ST32BL_Main+0x94>
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 80003f0:	47c0      	blx	r8


			//-- Flash Write
			//

			Ret = Ap_ST32BL_WriteFlash( Address + HW_ST32BL_FLASH_ADDRESS_OFFSET, Resp, Length );
 80003f2:	4639      	mov	r1, r7
			for( i=0; i<Length; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 80003f4:	4605      	mov	r5, r0


			//-- Flash Write
			//

			Ret = Ap_ST32BL_WriteFlash( Address + HW_ST32BL_FLASH_ADDRESS_OFFSET, Resp, Length );
 80003f6:	4632      	mov	r2, r6
 80003f8:	f509 5040 	add.w	r0, r9, #12288	; 0x3000
 80003fc:	4b18      	ldr	r3, [pc, #96]	; (8000460 <Ap_ST32BL_Main+0x118>)
 80003fe:	4798      	blx	r3

		
			if( CheckSum == CheckSumCalc && Ret == TRUE ) 	
 8000400:	42a5      	cmp	r5, r4
 8000402:	d0c2      	beq.n	800038a <Ap_ST32BL_Main+0x42>
			Resp[0] = Ap_ST32BL_ReceiveByte();
			Resp[1] = Ap_ST32BL_ReceiveByte();


			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
			else									Ap_ST32BL_SendByte(STM32_COMM_NACK);
 8000404:	201f      	movs	r0, #31
 8000406:	4913      	ldr	r1, [pc, #76]	; (8000454 <Ap_ST32BL_Main+0x10c>)
 8000408:	4788      	blx	r1
 800040a:	e7a0      	b.n	800034e <Ap_ST32BL_Main+0x6>
				Hw_Uart_Printf(HW_UART_COM1, "ACK\r\n");
				#endif	
			}
			else
			{
				Ap_ST32BL_SendByte(STM32_COMM_NACK);	
 800040c:	201f      	movs	r0, #31
 800040e:	e7df      	b.n	80003d0 <Ap_ST32BL_Main+0x88>
		}
		

		//-- Go Command
		//
		if( Cmd == STM32_CMD_GO )
 8000410:	2821      	cmp	r0, #33	; 0x21
 8000412:	d19c      	bne.n	800034e <Ap_ST32BL_Main+0x6>
 8000414:	2500      	movs	r5, #0
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 8000416:	4e10      	ldr	r6, [pc, #64]	; (8000458 <Ap_ST32BL_Main+0x110>)
 8000418:	47b0      	blx	r6
 800041a:	ac01      	add	r4, sp, #4
 800041c:	5560      	strb	r0, [r4, r5]
		if( Cmd == STM32_CMD_GO )
		{
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
 800041e:	3501      	adds	r5, #1
 8000420:	2d04      	cmp	r5, #4
 8000422:	d1f8      	bne.n	8000416 <Ap_ST32BL_Main+0xce>
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 8000424:	47b0      	blx	r6

			Address  = Resp[0] << 24;
 8000426:	7822      	ldrb	r2, [r4, #0]
			Address |= Resp[1] << 16;
 8000428:	7860      	ldrb	r0, [r4, #1]
			Address |= Resp[2] <<  8;
 800042a:	78a3      	ldrb	r3, [r4, #2]
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
 800042c:	0617      	lsls	r7, r2, #24
			Address |= Resp[1] << 16;
 800042e:	ea47 4100 	orr.w	r1, r7, r0, lsl #16
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;	
 8000432:	78e4      	ldrb	r4, [r4, #3]
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 8000434:	ea41 2603 	orr.w	r6, r1, r3, lsl #8
			Address |= Resp[3] <<  0;	
			

			Ap_ST32BL_SendByte(STM32_COMM_ACK);	
 8000438:	2079      	movs	r0, #121	; 0x79
 800043a:	4a06      	ldr	r2, [pc, #24]	; (8000454 <Ap_ST32BL_Main+0x10c>)
 800043c:	4790      	blx	r2
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;	
 800043e:	ea46 0504 	orr.w	r5, r6, r4
			

			Ap_ST32BL_SendByte(STM32_COMM_ACK);	

			Hw_Timer_Delay_ms(100);
 8000442:	2064      	movs	r0, #100	; 0x64
 8000444:	4f07      	ldr	r7, [pc, #28]	; (8000464 <Ap_ST32BL_Main+0x11c>)
 8000446:	47b8      	blx	r7

			//-- Go
			//
			Ap_ST32BL_JumpToApp( Address );
 8000448:	4628      	mov	r0, r5
 800044a:	4907      	ldr	r1, [pc, #28]	; (8000468 <Ap_ST32BL_Main+0x120>)
 800044c:	4788      	blx	r1
 800044e:	e77e      	b.n	800034e <Ap_ST32BL_Main+0x6>
 8000450:	080001a5 	.word	0x080001a5
 8000454:	08000179 	.word	0x08000179
 8000458:	08000191 	.word	0x08000191
 800045c:	080001fd 	.word	0x080001fd
 8000460:	080002ad 	.word	0x080002ad
 8000464:	080009f9 	.word	0x080009f9
 8000468:	0800030d 	.word	0x0800030d

0800046c <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 800046c:	4668      	mov	r0, sp
 800046e:	f020 0107 	bic.w	r1, r0, #7
 8000472:	468d      	mov	sp, r1
 8000474:	b501      	push	{r0, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000476:	2300      	movs	r3, #0
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 8000478:	4a2d      	ldr	r2, [pc, #180]	; (8000530 <zero_loop+0x9c>)
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800047a:	492e      	ldr	r1, [pc, #184]	; (8000534 <zero_loop+0xa0>)
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 800047c:	1898      	adds	r0, r3, r2
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800047e:	4288      	cmp	r0, r1
 8000480:	d204      	bcs.n	800048c <Hw_StartUp_Init+0x20>
	{
		*(pulDest++) = *(pulSrc++);
 8000482:	482d      	ldr	r0, [pc, #180]	; (8000538 <zero_loop+0xa4>)
 8000484:	5819      	ldr	r1, [r3, r0]
 8000486:	5099      	str	r1, [r3, r2]
 8000488:	3304      	adds	r3, #4
 800048a:	e7f5      	b.n	8000478 <Hw_StartUp_Init+0xc>
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 800048c:	4833      	ldr	r0, [pc, #204]	; (800055c <zero_loop+0xc8>)
 800048e:	4934      	ldr	r1, [pc, #208]	; (8000560 <zero_loop+0xcc>)
 8000490:	f04f 0200 	mov.w	r2, #0

08000494 <zero_loop>:
 8000494:	4288      	cmp	r0, r1
 8000496:	bfb8      	it	lt
 8000498:	f840 2b04 	strlt.w	r2, [r0], #4
 800049c:	f6ff affa 	blt.w	8000494 <zero_loop>
    

#if 1
    /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
    /* Set HSION bit */
    REG_RCC_CR |= (uint32_t) 0x00000001;
 80004a0:	4b26      	ldr	r3, [pc, #152]	; (800053c <zero_loop+0xa8>)

    /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
    REG_RCC_CFGR &= (uint32_t) 0xF8FF0000;
 80004a2:	4927      	ldr	r1, [pc, #156]	; (8000540 <zero_loop+0xac>)
    

#if 1
    /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
    /* Set HSION bit */
    REG_RCC_CR |= (uint32_t) 0x00000001;
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	f042 0001 	orr.w	r0, r2, #1

    /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
    REG_RCC_CFGR &= (uint32_t) 0xF8FF0000;
 80004aa:	4a26      	ldr	r2, [pc, #152]	; (8000544 <zero_loop+0xb0>)
    

#if 1
    /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
    /* Set HSION bit */
    REG_RCC_CR |= (uint32_t) 0x00000001;
 80004ac:	6018      	str	r0, [r3, #0]

    /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
    REG_RCC_CFGR &= (uint32_t) 0xF8FF0000;
 80004ae:	6810      	ldr	r0, [r2, #0]
 80004b0:	4001      	ands	r1, r0
 80004b2:	6011      	str	r1, [r2, #0]

    /* Reset HSEON, CSSON and PLLON bits */
    REG_RCC_CR &= (uint32_t) 0xFEF6FFFF;
 80004b4:	6818      	ldr	r0, [r3, #0]
 80004b6:	f020 7184 	bic.w	r1, r0, #17301504	; 0x1080000
 80004ba:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 80004be:	6018      	str	r0, [r3, #0]

    /* Reset HSEBYP bit */
    REG_RCC_CR &= (uint32_t) 0xFFFBFFFF;
 80004c0:	6819      	ldr	r1, [r3, #0]
 80004c2:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 80004c6:	6018      	str	r0, [r3, #0]

    /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
    REG_RCC_CFGR &= (uint32_t) 0xFF80FFFF;
 80004c8:	6811      	ldr	r1, [r2, #0]
 80004ca:	f421 00fe 	bic.w	r0, r1, #8323072	; 0x7f0000

    /* Disable all interrupts and clear pending bits  */
    REG_RCC_CIR = 0x009F0000;
 80004ce:	f44f 011f 	mov.w	r1, #10420224	; 0x9f0000

    /* Reset HSEBYP bit */
    REG_RCC_CR &= (uint32_t) 0xFFFBFFFF;

    /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
    REG_RCC_CFGR &= (uint32_t) 0xFF80FFFF;
 80004d2:	6010      	str	r0, [r2, #0]

    /* Disable all interrupts and clear pending bits  */
    REG_RCC_CIR = 0x009F0000;
 80004d4:	6051      	str	r1, [r2, #4]

    REG_SCB_VTOR = (uint32_t)0x08000000;     /* Vector Table Relocation in Internal FLASH. */
 80004d6:	4a1c      	ldr	r2, [pc, #112]	; (8000548 <zero_loop+0xb4>)
 80004d8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80004dc:	6010      	str	r0, [r2, #0]
#endif


  REG_RCC_APB1RSTR = 0xFFFFFFFF;
 80004de:	481b      	ldr	r0, [pc, #108]	; (800054c <zero_loop+0xb8>)
  REG_RCC_APB2RSTR = 0xFFFFFFFF;
 80004e0:	4a1b      	ldr	r2, [pc, #108]	; (8000550 <zero_loop+0xbc>)

    REG_SCB_VTOR = (uint32_t)0x08000000;     /* Vector Table Relocation in Internal FLASH. */
#endif


  REG_RCC_APB1RSTR = 0xFFFFFFFF;
 80004e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004e6:	6001      	str	r1, [r0, #0]
  REG_RCC_APB2RSTR = 0xFFFFFFFF;
 80004e8:	6011      	str	r1, [r2, #0]
  REG_RCC_APB1RSTR = 0x00000000;
 80004ea:	2100      	movs	r1, #0
 80004ec:	6001      	str	r1, [r0, #0]
  REG_RCC_APB2RSTR = 0x00000000;
 80004ee:	6011      	str	r1, [r2, #0]
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR  |= (1<<16);	
 80004f0:	6818      	ldr	r0, [r3, #0]
 80004f2:	f440 3280 	orr.w	r2, r0, #65536	; 0x10000
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	f642 4310 	movw	r3, #11280	; 0x2c10
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 80004fc:	490f      	ldr	r1, [pc, #60]	; (800053c <zero_loop+0xa8>)
 80004fe:	6808      	ldr	r0, [r1, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 11280) );
 8000500:	0382      	lsls	r2, r0, #14
 8000502:	d401      	bmi.n	8000508 <zero_loop+0x74>
 8000504:	3b01      	subs	r3, #1
 8000506:	d1f9      	bne.n	80004fc <zero_loop+0x68>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8000508:	4912      	ldr	r1, [pc, #72]	; (8000554 <zero_loop+0xc0>)
 800050a:	680a      	ldr	r2, [r1, #0]
 800050c:	f042 0010 	orr.w	r0, r2, #16
 8000510:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 8000512:	680b      	ldr	r3, [r1, #0]
 8000514:	f023 0203 	bic.w	r2, r3, #3
 8000518:	600a      	str	r2, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 800051a:	6808      	ldr	r0, [r1, #0]
 800051c:	f040 0302 	orr.w	r3, r0, #2
 8000520:	600b      	str	r3, [r1, #0]


    main();
 8000522:	490d      	ldr	r1, [pc, #52]	; (8000558 <zero_loop+0xc4>)
 8000524:	4788      	blx	r1

}
 8000526:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 800052a:	4685      	mov	sp, r0
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000000 	.word	0x20000000
 8000534:	200000e4 	.word	0x200000e4
 8000538:	0800230c 	.word	0x0800230c
 800053c:	40021000 	.word	0x40021000
 8000540:	f8ff0000 	.word	0xf8ff0000
 8000544:	40021004 	.word	0x40021004
 8000548:	e000ed08 	.word	0xe000ed08
 800054c:	40021010 	.word	0x40021010
 8000550:	4002100c 	.word	0x4002100c
 8000554:	40022000 	.word	0x40022000
 8000558:	0800001d 	.word	0x0800001d
 800055c:	20000200 	.word	0x20000200
 8000560:	2000132c 	.word	0x2000132c

08000564 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 8000564:	b508      	push	{r3, lr}
	u32 i;

	//-- PLL 설정
	//
	Hw_PLL_Init();
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <Hw_Init+0x38>)
 8000568:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 800056a:	480d      	ldr	r0, [pc, #52]	; (80005a0 <Hw_Init+0x3c>)
 800056c:	4780      	blx	r0
	

	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800056e:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <Hw_Init+0x40>)
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000570:	490d      	ldr	r1, [pc, #52]	; (80005a8 <Hw_Init+0x44>)
	Hw_ISR_Init();
	

	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000572:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 8000576:	6013      	str	r3, [r2, #0]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <Hw_Init+0x48>)
	

	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800057a:	6051      	str	r1, [r2, #4]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800057c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8000580:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000584:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <Hw_Init+0x4c>)


	//Hw_DMA_Init();
	Hw_Uart_Init();
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <Hw_Init+0x50>)
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000588:	6018      	str	r0, [r3, #0]


	//Hw_DMA_Init();
	Hw_Uart_Init();
 800058a:	4790      	blx	r2
	Hw_Timer_Init();
 800058c:	490a      	ldr	r1, [pc, #40]	; (80005b8 <Hw_Init+0x54>)
 800058e:	4788      	blx	r1
	Hw_VCom_Init();
 8000590:	480a      	ldr	r0, [pc, #40]	; (80005bc <Hw_Init+0x58>)
 8000592:	4780      	blx	r0
	Hw_Led_Init();	
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <Hw_Init+0x5c>)
 8000596:	4798      	blx	r3
 8000598:	bd08      	pop	{r3, pc}
 800059a:	bf00      	nop
 800059c:	0800080d 	.word	0x0800080d
 80005a0:	08000891 	.word	0x08000891
 80005a4:	40010800 	.word	0x40010800
 80005a8:	333334b3 	.word	0x333334b3
 80005ac:	33444444 	.word	0x33444444
 80005b0:	40011004 	.word	0x40011004
 80005b4:	08000739 	.word	0x08000739
 80005b8:	08000911 	.word	0x08000911
 80005bc:	08000bad 	.word	0x08000bad
 80005c0:	08000b31 	.word	0x08000b31

080005c4 <Hw_ISR_UART2_Handler>:


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 80005c4:	b507      	push	{r0, r1, r2, lr}
	u8 UartData;
				
	UartData = REG_USART2_DR;
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <Hw_ISR_UART2_Handler+0x20>)
 80005c8:	a902      	add	r1, sp, #8
 80005ca:	6818      	ldr	r0, [r3, #0]
	

	Hw_Uart_Q_Push( 1, &UartData );
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <Hw_ISR_UART2_Handler+0x24>)
//
void Hw_ISR_UART2_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART2_DR;
 80005ce:	f801 0d01 	strb.w	r0, [r1, #-1]!
	

	Hw_Uart_Q_Push( 1, &UartData );
 80005d2:	2001      	movs	r0, #1
 80005d4:	4790      	blx	r2

	if( Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr != NULL )
 80005d6:	4905      	ldr	r1, [pc, #20]	; (80005ec <Hw_ISR_UART2_Handler+0x28>)
 80005d8:	694b      	ldr	r3, [r1, #20]
 80005da:	b113      	cbz	r3, 80005e2 <Hw_ISR_UART2_Handler+0x1e>
	{
		(*Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr)(UartData);	
 80005dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80005e0:	4798      	blx	r3
	} 
}
 80005e2:	bd0e      	pop	{r1, r2, r3, pc}
 80005e4:	40004404 	.word	0x40004404
 80005e8:	08000a65 	.word	0x08000a65
 80005ec:	2000034c 	.word	0x2000034c

080005f0 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80005f0:	b507      	push	{r0, r1, r2, lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <Hw_ISR_UART1_Handler+0x20>)
 80005f4:	a902      	add	r1, sp, #8
 80005f6:	6818      	ldr	r0, [r3, #0]
	
	Hw_Uart_Q_Push( 0, &UartData );
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <Hw_ISR_UART1_Handler+0x24>)
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80005fa:	f801 0d01 	strb.w	r0, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 80005fe:	2000      	movs	r0, #0
 8000600:	4790      	blx	r2

	if( Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr != NULL )
 8000602:	4905      	ldr	r1, [pc, #20]	; (8000618 <Hw_ISR_UART1_Handler+0x28>)
 8000604:	688b      	ldr	r3, [r1, #8]
 8000606:	b113      	cbz	r3, 800060e <Hw_ISR_UART1_Handler+0x1e>
	{
		(*Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr)(UartData);	
 8000608:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800060c:	4798      	blx	r3
	} 
}
 800060e:	bd0e      	pop	{r1, r2, r3, pc}
 8000610:	40013804 	.word	0x40013804
 8000614:	08000a65 	.word	0x08000a65
 8000618:	2000034c 	.word	0x2000034c

0800061c <Hw_Uart_Putch.part.0>:
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
	switch( Ch )
	{
		case HW_UART_COM1:
		    while( !(REG_USART1_SR & 0x80) );
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <Hw_Uart_Putch.part.0+0x10>)
 800061e:	6819      	ldr	r1, [r3, #0]
 8000620:	060b      	lsls	r3, r1, #24
 8000622:	d5fb      	bpl.n	800061c <Hw_Uart_Putch.part.0>
    		REG_USART1_DR = Uart_PutData;
 8000624:	4a02      	ldr	r2, [pc, #8]	; (8000630 <Hw_Uart_Putch.part.0+0x14>)
 8000626:	6010      	str	r0, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40013800 	.word	0x40013800
 8000630:	40013804 	.word	0x40013804

08000634 <Hw_Uart_Open_COM1>:
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <Hw_Uart_Open_COM1+0x4c>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8000636:	b510      	push	{r4, lr}

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000638:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 800063a:	4812      	ldr	r0, [pc, #72]	; (8000684 <Hw_Uart_Open_COM1+0x50>)
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 800063c:	6099      	str	r1, [r3, #8]
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 800063e:	6802      	ldr	r2, [r0, #0]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000640:	4c11      	ldr	r4, [pc, #68]	; (8000688 <Hw_Uart_Open_COM1+0x54>)
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000642:	f442 4180 	orr.w	r1, r2, #16384	; 0x4000
 8000646:	6001      	str	r1, [r0, #0]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000648:	230c      	movs	r3, #12
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800064a:	4810      	ldr	r0, [pc, #64]	; (800068c <Hw_Uart_Open_COM1+0x58>)
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800064c:	6023      	str	r3, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800064e:	2200      	movs	r2, #0
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <Hw_Uart_Open_COM1+0x5c>)
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000652:	f240 2171 	movw	r1, #625	; 0x271
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000656:	6002      	str	r2, [r0, #0]
	REG_USART1_CR3  = 0;
 8000658:	6042      	str	r2, [r0, #4]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800065a:	f840 1c08 	str.w	r1, [r0, #-8]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800065e:	6818      	ldr	r0, [r3, #0]
 8000660:	f040 0120 	orr.w	r1, r0, #32
 8000664:	6019      	str	r1, [r3, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8000666:	6823      	ldr	r3, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8000668:	490a      	ldr	r1, [pc, #40]	; (8000694 <Hw_Uart_Open_COM1+0x60>)
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 800066a:	f043 0020 	orr.w	r0, r3, #32
 800066e:	6020      	str	r0, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <Hw_Uart_Open_COM1+0x64>)
 8000672:	2025      	movs	r0, #37	; 0x25
 8000674:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 8000676:	6822      	ldr	r2, [r4, #0]
 8000678:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 800067c:	6021      	str	r1, [r4, #0]
 800067e:	bd10      	pop	{r4, pc}
 8000680:	2000034c 	.word	0x2000034c
 8000684:	40021018 	.word	0x40021018
 8000688:	4001380c 	.word	0x4001380c
 800068c:	40013810 	.word	0x40013810
 8000690:	e000e104 	.word	0xe000e104
 8000694:	080005f1 	.word	0x080005f1
 8000698:	080008a1 	.word	0x080008a1

0800069c <Hw_Uart_Open_COM2>:
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <Hw_Uart_Open_COM2+0x7c>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 800069e:	b510      	push	{r4, lr}

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 80006a0:	6118      	str	r0, [r3, #16]
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 80006a2:	481e      	ldr	r0, [pc, #120]	; (800071c <Hw_Uart_Open_COM2+0x80>)
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 80006a4:	4c1e      	ldr	r4, [pc, #120]	; (8000720 <Hw_Uart_Open_COM2+0x84>)
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 80006a6:	6802      	ldr	r2, [r0, #0]
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
 80006a8:	6159      	str	r1, [r3, #20]
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 80006aa:	f442 3100 	orr.w	r1, r2, #131072	; 0x20000
 80006ae:	6001      	str	r1, [r0, #0]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 80006b0:	6823      	ldr	r3, [r4, #0]
 80006b2:	f423 6070 	bic.w	r0, r3, #3840	; 0xf00
 80006b6:	6020      	str	r0, [r4, #0]
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 80006b8:	6822      	ldr	r2, [r4, #0]
 80006ba:	f442 7140 	orr.w	r1, r2, #768	; 0x300
 80006be:	6021      	str	r1, [r4, #0]
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 80006c0:	6823      	ldr	r3, [r4, #0]
 80006c2:	f443 6000 	orr.w	r0, r3, #2048	; 0x800
 80006c6:	6020      	str	r0, [r4, #0]
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 80006c8:	6822      	ldr	r2, [r4, #0]
 80006ca:	f422 4170 	bic.w	r1, r2, #61440	; 0xf000
 80006ce:	6021      	str	r1, [r4, #0]
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 80006d0:	6823      	ldr	r3, [r4, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 80006d2:	210c      	movs	r1, #12
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 80006d4:	6023      	str	r3, [r4, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 80006d6:	6820      	ldr	r0, [r4, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <Hw_Uart_Open_COM2+0x88>)
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 80006da:	f440 4280 	orr.w	r2, r0, #16384	; 0x4000
 80006de:	6022      	str	r2, [r4, #0]
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 80006e0:	4c11      	ldr	r4, [pc, #68]	; (8000728 <Hw_Uart_Open_COM2+0x8c>)
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 80006e2:	2200      	movs	r2, #0
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 80006e4:	f44f 709c 	mov.w	r0, #312	; 0x138
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 80006e8:	6021      	str	r1, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 80006ea:	601a      	str	r2, [r3, #0]
	REG_USART2_CR3  = 0;
 80006ec:	605a      	str	r2, [r3, #4]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 80006ee:	f843 0c08 	str.w	r0, [r3, #-8]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <Hw_Uart_Open_COM2+0x90>)
 80006f4:	6819      	ldr	r1, [r3, #0]
 80006f6:	f041 0040 	orr.w	r0, r1, #64	; 0x40
 80006fa:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 80006fc:	6823      	ldr	r3, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 80006fe:	2026      	movs	r0, #38	; 0x26
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 8000700:	f043 0120 	orr.w	r1, r3, #32
 8000704:	6021      	str	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <Hw_Uart_Open_COM2+0x94>)
 8000708:	490a      	ldr	r1, [pc, #40]	; (8000734 <Hw_Uart_Open_COM2+0x98>)
 800070a:	4798      	blx	r3
	
	REG_USART2_CR1 |= ( 1 << 13 );	    // USART Enable
 800070c:	6822      	ldr	r2, [r4, #0]
 800070e:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
 8000712:	6020      	str	r0, [r4, #0]
 8000714:	bd10      	pop	{r4, pc}
 8000716:	bf00      	nop
 8000718:	2000034c 	.word	0x2000034c
 800071c:	4002101c 	.word	0x4002101c
 8000720:	40010800 	.word	0x40010800
 8000724:	40004410 	.word	0x40004410
 8000728:	4000440c 	.word	0x4000440c
 800072c:	e000e104 	.word	0xe000e104
 8000730:	080008a1 	.word	0x080008a1
 8000734:	080005c5 	.word	0x080005c5

08000738 <Hw_Uart_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 8000738:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <Hw_Uart_Init+0x30>)
 800073c:	4798      	blx	r3
 800073e:	2000      	movs	r0, #0
     TITLE   : Hw_Uart_Init
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
 8000740:	4a0a      	ldr	r2, [pc, #40]	; (800076c <Hw_Uart_Init+0x34>)
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000742:	2400      	movs	r4, #0
     TITLE   : Hw_Uart_Init
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
 8000744:	1881      	adds	r1, r0, r2
 8000746:	300c      	adds	r0, #12
	u32 i;
	
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
 8000748:	2848      	cmp	r0, #72	; 0x48
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800074a:	604c      	str	r4, [r1, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800074c:	608c      	str	r4, [r1, #8]
	u32 i;
	
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
 800074e:	d1f7      	bne.n	8000740 <Hw_Uart_Init+0x8>
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8000750:	4621      	mov	r1, r4
 8000752:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <Hw_Uart_Init+0x38>)
 8000758:	4798      	blx	r3
			break;
			
		case HW_UART_COM2:
			Hw_Uart_Open_COM2( BaudData, ISR_FuncPtr );
 800075a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800075e:	4621      	mov	r1, r4
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <Hw_Uart_Init+0x3c>)
 8000762:	4790      	blx	r2
 8000764:	bd10      	pop	{r4, pc}
 8000766:	bf00      	nop
 8000768:	08000a0d 	.word	0x08000a0d
 800076c:	2000034c 	.word	0x2000034c
 8000770:	08000635 	.word	0x08000635
 8000774:	0800069d 	.word	0x0800069d

08000778 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000778:	b513      	push	{r0, r1, r4, lr}
	u8 Uart_GetData = 0;
 800077a:	2300      	movs	r3, #0

	if( Ch == HW_UART_VCOM )
 800077c:	2805      	cmp	r0, #5
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 800077e:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 8000780:	f88d 3007 	strb.w	r3, [sp, #7]

	if( Ch == HW_UART_VCOM )
 8000784:	d102      	bne.n	800078c <Hw_Uart_Getch+0x14>
	{
		return Hw_VCom_Getch();
 8000786:	4808      	ldr	r0, [pc, #32]	; (80007a8 <Hw_Uart_Getch+0x30>)
 8000788:	4780      	blx	r0
 800078a:	e00b      	b.n	80007a4 <Hw_Uart_Getch+0x2c>
	}

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 800078c:	4620      	mov	r0, r4
 800078e:	4907      	ldr	r1, [pc, #28]	; (80007ac <Hw_Uart_Getch+0x34>)
 8000790:	4788      	blx	r1
 8000792:	2800      	cmp	r0, #0
 8000794:	d0fa      	beq.n	800078c <Hw_Uart_Getch+0x14>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 8000796:	4620      	mov	r0, r4
 8000798:	f10d 0107 	add.w	r1, sp, #7
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <Hw_Uart_Getch+0x38>)
 800079e:	4790      	blx	r2

	return Uart_GetData;
 80007a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80007a4:	bd1c      	pop	{r2, r3, r4, pc}
 80007a6:	bf00      	nop
 80007a8:	08000be5 	.word	0x08000be5
 80007ac:	08000a59 	.word	0x08000a59
 80007b0:	08000abd 	.word	0x08000abd

080007b4 <Hw_Uart_Putch>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
	switch( Ch )
 80007b4:	2801      	cmp	r0, #1
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
 80007b6:	b508      	push	{r3, lr}
	switch( Ch )
 80007b8:	d00a      	beq.n	80007d0 <Hw_Uart_Putch+0x1c>
 80007ba:	d305      	bcc.n	80007c8 <Hw_Uart_Putch+0x14>
 80007bc:	2805      	cmp	r0, #5
 80007be:	d10e      	bne.n	80007de <Hw_Uart_Putch+0x2a>

		case HW_UART_COM5:
			break;		

		case HW_UART_VCOM:
			Hw_VCom_Putch( Uart_PutData );
 80007c0:	4608      	mov	r0, r1
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <Hw_Uart_Putch+0x2c>)
 80007c4:	4798      	blx	r3
			break;	
 80007c6:	e00a      	b.n	80007de <Hw_Uart_Putch+0x2a>
 80007c8:	4608      	mov	r0, r1
 80007ca:	4906      	ldr	r1, [pc, #24]	; (80007e4 <Hw_Uart_Putch+0x30>)
 80007cc:	4788      	blx	r1
 80007ce:	bd08      	pop	{r3, pc}
		    while( !(REG_USART1_SR & 0x80) );
    		REG_USART1_DR = Uart_PutData;
			break;
			
		case HW_UART_COM2:
		    while( !(REG_USART2_SR & 0x80) );
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <Hw_Uart_Putch+0x34>)
 80007d2:	6802      	ldr	r2, [r0, #0]
 80007d4:	0612      	lsls	r2, r2, #24
 80007d6:	d5fb      	bpl.n	80007d0 <Hw_Uart_Putch+0x1c>
    		REG_USART2_DR = Uart_PutData;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <Hw_Uart_Putch+0x38>)
 80007da:	6019      	str	r1, [r3, #0]
			break;
 80007dc:	bd08      	pop	{r3, pc}
 80007de:	bd08      	pop	{r3, pc}
 80007e0:	08000c11 	.word	0x08000c11
 80007e4:	0800061d 	.word	0x0800061d
 80007e8:	40004400 	.word	0x40004400
 80007ec:	40004404 	.word	0x40004404

080007f0 <Hw_Uart_PrintEx>:
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_PrintEx( u8 Ch, char *UartPrintData )
{
 80007f0:	b538      	push	{r3, r4, r5, lr}
 80007f2:	4605      	mov	r5, r0
     TITLE	: Uart_PrintEx
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_PrintEx( u8 Ch, char *UartPrintData )
 80007f4:	1e4c      	subs	r4, r1, #1
{
	while( *UartPrintData != '\0' )
 80007f6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80007fa:	b119      	cbz	r1, 8000804 <Hw_Uart_PrintEx+0x14>
	{
		Hw_Uart_Putch( Ch, *UartPrintData );
 80007fc:	4628      	mov	r0, r5
 80007fe:	4b02      	ldr	r3, [pc, #8]	; (8000808 <Hw_Uart_PrintEx+0x18>)
 8000800:	4798      	blx	r3
 8000802:	e7f8      	b.n	80007f6 <Hw_Uart_PrintEx+0x6>
		UartPrintData++;
	}        
}
 8000804:	bd38      	pop	{r3, r4, r5, pc}
 8000806:	bf00      	nop
 8000808:	080007b5 	.word	0x080007b5

0800080c <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <Hw_PLL_Init+0x78>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	f422 107c 	bic.w	r0, r2, #4128768	; 0x3f0000
 8000814:	f020 01f0 	bic.w	r1, r0, #240	; 0xf0
 8000818:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	f442 10e8 	orr.w	r0, r2, #1900544	; 0x1d0000
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <Hw_PLL_Init+0x7c>)
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8000822:	6018      	str	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000824:	6811      	ldr	r1, [r2, #0]
 8000826:	f041 7080 	orr.w	r0, r1, #16777216	; 0x1000000
 800082a:	6010      	str	r0, [r2, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 800082c:	6811      	ldr	r1, [r2, #0]
 800082e:	0189      	lsls	r1, r1, #6
 8000830:	d5fc      	bpl.n	800082c <Hw_PLL_Init+0x20>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	f022 0003 	bic.w	r0, r2, #3
 8000838:	6018      	str	r0, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 800083a:	6819      	ldr	r1, [r3, #0]
 800083c:	f041 0202 	orr.w	r2, r1, #2
 8000840:	601a      	str	r2, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 8000848:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	f422 60e0 	bic.w	r0, r2, #1792	; 0x700
 8000850:	6018      	str	r0, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 8000852:	6819      	ldr	r1, [r3, #0]
 8000854:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 8000858:	601a      	str	r2, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	f420 5160 	bic.w	r1, r0, #14336	; 0x3800
 8000860:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	601a      	str	r2, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <Hw_PLL_Init+0x78>)
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	f000 010c 	and.w	r1, r0, #12
 800086e:	2908      	cmp	r1, #8
 8000870:	d1f9      	bne.n	8000866 <Hw_PLL_Init+0x5a>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <Hw_PLL_Init+0x80>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
 800087a:	f040 011d 	orr.w	r1, r0, #29
 800087e:	6019      	str	r1, [r3, #0]
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40021004 	.word	0x40021004
 8000888:	40021000 	.word	0x40021000
 800088c:	40021018 	.word	0x40021018

08000890 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8000890:	4b01      	ldr	r3, [pc, #4]	; (8000898 <Hw_ISR_Init+0x8>)
 8000892:	4a02      	ldr	r2, [pc, #8]	; (800089c <Hw_ISR_Init+0xc>)
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	4770      	bx	lr
 8000898:	e000ed08 	.word	0xe000ed08
 800089c:	20000400 	.word	0x20000400

080008a0 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 80008a0:	4b02      	ldr	r3, [pc, #8]	; (80008ac <Hw_ISR_SetIRQFunc+0xc>)
 80008a2:	3010      	adds	r0, #16
 80008a4:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000400 	.word	0x20000400

080008b0 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 80008b0:	4b02      	ldr	r3, [pc, #8]	; (80008bc <Hw_ISR_SetIRQFuncByAddr+0xc>)
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 80008b2:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 80008b4:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000400 	.word	0x20000400

080008c0 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 80008c0:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 80008c2:	203c      	movs	r0, #60	; 0x3c
 80008c4:	4902      	ldr	r1, [pc, #8]	; (80008d0 <Hw_Timer_SetupISR+0x10>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <Hw_Timer_SetupISR+0x14>)
 80008ca:	4798      	blx	r3
 80008cc:	bd08      	pop	{r3, pc}
 80008ce:	bf00      	nop
 80008d0:	080009bd 	.word	0x080009bd
 80008d4:	080008b1 	.word	0x080008b1

080008d8 <Hw_Timer_Setup>:
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <Hw_Timer_Setup+0x30>)
 80008da:	4a0c      	ldr	r2, [pc, #48]	; (800090c <Hw_Timer_Setup+0x34>)
	
	REG_STK_VAL  = 0;	
 80008dc:	2000      	movs	r0, #0
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 80008de:	601a      	str	r2, [r3, #0]
	
	REG_STK_VAL  = 0;	
 80008e0:	6058      	str	r0, [r3, #4]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 80008e2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80008e6:	f041 0204 	orr.w	r2, r1, #4
 80008ea:	f843 2c04 	str.w	r2, [r3, #-4]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 80008ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80008f2:	f040 0102 	orr.w	r1, r0, #2
 80008f6:	f843 1c04 	str.w	r1, [r3, #-4]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 80008fa:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80008fe:	f042 0001 	orr.w	r0, r2, #1
 8000902:	f843 0c04 	str.w	r0, [r3, #-4]

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000906:	4770      	bx	lr
 8000908:	e000e014 	.word	0xe000e014
 800090c:	0001193f 	.word	0x0001193f

08000910 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 8000910:	b508      	push	{r3, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <Hw_Timer_Init+0x38>)
 8000914:	7818      	ldrb	r0, [r3, #0]
 8000916:	2801      	cmp	r0, #1
 8000918:	d014      	beq.n	8000944 <Hw_Timer_Init+0x34>
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <Hw_Timer_Init+0x3c>)
     TITLE   : Hw_Timer_Init
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
 800091c:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000920:	2200      	movs	r2, #0
 8000922:	f803 2c08 	strb.w	r2, [r3, #-8]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000926:	f823 2c06 	strh.w	r2, [r3, #-6]
		Timer_Tbl[i].Timer_Init = 0;
 800092a:	f823 2c04 	strh.w	r2, [r3, #-4]
		Timer_Tbl[i].TmrFnct    = NULL;
 800092e:	f843 2b10 	str.w	r2, [r3], #16
	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
 8000932:	428b      	cmp	r3, r1
 8000934:	d1f4      	bne.n	8000920 <Hw_Timer_Init+0x10>
		Timer_Tbl[i].Timer_Init = 0;
		Timer_Tbl[i].TmrFnct    = NULL;
	}	                   
	
	
	Hw_Timer_SetupISR();
 8000936:	4806      	ldr	r0, [pc, #24]	; (8000950 <Hw_Timer_Init+0x40>)
 8000938:	4780      	blx	r0
	Hw_Timer_Setup();	
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <Hw_Timer_Init+0x44>)
 800093c:	4798      	blx	r3

	Excute = 1;
 800093e:	4a02      	ldr	r2, [pc, #8]	; (8000948 <Hw_Timer_Init+0x38>)
 8000940:	2101      	movs	r1, #1
 8000942:	7011      	strb	r1, [r2, #0]
 8000944:	bd08      	pop	{r3, pc}
 8000946:	bf00      	nop
 8000948:	200002a0 	.word	0x200002a0
 800094c:	20000208 	.word	0x20000208
 8000950:	080008c1 	.word	0x080008c1
 8000954:	080008d9 	.word	0x080008d9

08000958 <Hw_Timer_Tick>:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8000958:	b538      	push	{r3, r4, r5, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <Hw_Timer_Tick+0x58>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 800095c:	4915      	ldr	r1, [pc, #84]	; (80009b4 <Hw_Timer_Tick+0x5c>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	1c50      	adds	r0, r2, #1
 8000962:	6018      	str	r0, [r3, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000964:	880c      	ldrh	r4, [r1, #0]
 8000966:	b2a5      	uxth	r5, r4
 8000968:	b11d      	cbz	r5, 8000972 <Hw_Timer_Tick+0x1a>
 800096a:	880b      	ldrh	r3, [r1, #0]
 800096c:	1e5a      	subs	r2, r3, #1
 800096e:	b290      	uxth	r0, r2
 8000970:	8008      	strh	r0, [r1, #0]
 8000972:	4c11      	ldr	r4, [pc, #68]	; (80009b8 <Hw_Timer_Tick+0x60>)
     WORK	:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
 8000974:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000978:	f814 1c08 	ldrb.w	r1, [r4, #-8]
 800097c:	2901      	cmp	r1, #1
 800097e:	d112      	bne.n	80009a6 <Hw_Timer_Tick+0x4e>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000980:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 8000984:	1e5a      	subs	r2, r3, #1
 8000986:	b290      	uxth	r0, r2
 8000988:	f824 0c06 	strh.w	r0, [r4, #-6]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800098c:	b958      	cbnz	r0, 80009a6 <Hw_Timer_Tick+0x4e>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800098e:	f814 1c07 	ldrb.w	r1, [r4, #-7]

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000992:	f834 3c04 	ldrh.w	r3, [r4, #-4]
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000996:	2901      	cmp	r1, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8000998:	bf08      	it	eq
 800099a:	f804 0c08 	strbeq.w	r0, [r4, #-8]

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800099e:	f824 3c06 	strh.w	r3, [r4, #-6]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80009a2:	6822      	ldr	r2, [r4, #0]
 80009a4:	4790      	blx	r2
 80009a6:	3410      	adds	r4, #16

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 80009a8:	42ac      	cmp	r4, r5
 80009aa:	d1e5      	bne.n	8000978 <Hw_Timer_Tick+0x20>
				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
			}
		}
	}
	
}
 80009ac:	bd38      	pop	{r3, r4, r5, pc}
 80009ae:	bf00      	nop
 80009b0:	200002a4 	.word	0x200002a4
 80009b4:	200002a8 	.word	0x200002a8
 80009b8:	20000208 	.word	0x20000208

080009bc <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 80009bc:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 80009be:	4b01      	ldr	r3, [pc, #4]	; (80009c4 <Hw_Timer_ISR+0x8>)
 80009c0:	4798      	blx	r3
 80009c2:	bd08      	pop	{r3, pc}
 80009c4:	08000959 	.word	0x08000959

080009c8 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 80009c8:	b510      	push	{r4, lr}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 80009ca:	4c05      	ldr	r4, [pc, #20]	; (80009e0 <Hw_Timer_Set+0x18>)
 80009cc:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 80009d0:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 80009d2:	9b02      	ldr	r3, [sp, #8]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 80009d4:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 80009d6:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 80009d8:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 80009da:	8081      	strh	r1, [r0, #4]
 80009dc:	bd10      	pop	{r4, pc}
 80009de:	bf00      	nop
 80009e0:	20000200 	.word	0x20000200

080009e4 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 80009e4:	2809      	cmp	r0, #9
 80009e6:	d803      	bhi.n	80009f0 <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <Hw_Timer_Start+0x10>)
 80009ea:	0100      	lsls	r0, r0, #4
 80009ec:	2201      	movs	r2, #1
 80009ee:	541a      	strb	r2, [r3, r0]
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000200 	.word	0x20000200

080009f8 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <Hw_Timer_Delay_ms+0x10>)
 80009fa:	8018      	strh	r0, [r3, #0]
	
	while( Tmr_Ctn );
 80009fc:	881a      	ldrh	r2, [r3, #0]
 80009fe:	b290      	uxth	r0, r2
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d1fb      	bne.n	80009fc <Hw_Timer_Delay_ms+0x4>
}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	200002a8 	.word	0x200002a8

08000a0c <Hw_Uart_Q_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
 8000a0c:	2300      	movs	r3, #0
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8000a0e:	4904      	ldr	r1, [pc, #16]	; (8000a20 <Hw_Uart_Q_Init+0x14>)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <Hw_Uart_Q_Init+0x18>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	525a      	strh	r2, [r3, r1]
 8000a16:	521a      	strh	r2, [r3, r0]
 8000a18:	3302      	adds	r3, #2
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
 8000a1a:	2b0e      	cmp	r3, #14
 8000a1c:	d1f7      	bne.n	8000a0e <Hw_Uart_Q_Init+0x2>
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
	}
}
 8000a1e:	4770      	bx	lr
 8000a20:	20000686 	.word	0x20000686
 8000a24:	20000694 	.word	0x20000694

08000a28 <HW_UART_Q_SIZE>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HW_UART_Q_SIZE+0x24>)
 8000a2a:	4909      	ldr	r1, [pc, #36]	; (8000a50 <HW_UART_Q_SIZE+0x28>)
 8000a2c:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8000a30:	f931 0010 	ldrsh.w	r0, [r1, r0, lsl #1]
 8000a34:	1a13      	subs	r3, r2, r0
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <HW_UART_Q_SIZE+0x2c>)
 8000a38:	3320      	adds	r3, #32
 8000a3a:	4018      	ands	r0, r3
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	da03      	bge.n	8000a48 <HW_UART_Q_SIZE+0x20>
 8000a40:	1e42      	subs	r2, r0, #1
 8000a42:	f062 011f 	orn	r1, r2, #31
 8000a46:	1c48      	adds	r0, r1, #1
}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000694 	.word	0x20000694
 8000a50:	20000686 	.word	0x20000686
 8000a54:	8000001f 	.word	0x8000001f

08000a58 <HW_UART_Q_VAILD>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
 8000a58:	b508      	push	{r3, lr}
	return HW_UART_Q_SIZE(Ch);
 8000a5a:	4b01      	ldr	r3, [pc, #4]	; (8000a60 <HW_UART_Q_VAILD+0x8>)
 8000a5c:	4798      	blx	r3
}
 8000a5e:	bd08      	pop	{r3, pc}
 8000a60:	08000a29 	.word	0x08000a29

08000a64 <Hw_Uart_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8000a64:	b538      	push	{r3, r4, r5, lr}

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <Hw_Uart_Q_Push+0x48>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8000a68:	4604      	mov	r4, r0
 8000a6a:	460d      	mov	r5, r1

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000a6c:	4798      	blx	r3
 8000a6e:	281f      	cmp	r0, #31
 8000a70:	d01a      	beq.n	8000aa8 <Hw_Uart_Q_Push+0x44>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <Hw_Uart_Q_Push+0x4c>)
 8000a74:	2021      	movs	r0, #33	; 0x21
 8000a76:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8000a7a:	782d      	ldrb	r5, [r5, #0]
 8000a7c:	b219      	sxth	r1, r3
 8000a7e:	fb00 1104 	mla	r1, r0, r4, r1
 8000a82:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <Hw_Uart_Q_Push+0x50>)
 8000a84:	3301      	adds	r3, #1
 8000a86:	5445      	strb	r5, [r0, r1]
 8000a88:	b299      	uxth	r1, r3
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <Hw_Uart_Q_Push+0x54>)
 8000a8c:	b208      	sxth	r0, r1
 8000a8e:	4003      	ands	r3, r0
 8000a90:	2b00      	cmp	r3, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000a92:	f822 1014 	strh.w	r1, [r2, r4, lsl #1]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000a96:	da03      	bge.n	8000aa0 <Hw_Uart_Q_Push+0x3c>
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	f063 011f 	orn	r1, r3, #31
 8000a9e:	1c4b      	adds	r3, r1, #1
 8000aa0:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]

	return TRUE;
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	bd38      	pop	{r3, r4, r5, pc}
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000aa8:	2000      	movs	r0, #0

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;

	return TRUE;
}
 8000aaa:	bd38      	pop	{r3, r4, r5, pc}
 8000aac:	08000a29 	.word	0x08000a29
 8000ab0:	20000694 	.word	0x20000694
 8000ab4:	20000590 	.word	0x20000590
 8000ab8:	8000001f 	.word	0x8000001f

08000abc <Hw_Uart_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000abc:	b538      	push	{r3, r4, r5, lr}
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <Hw_Uart_Q_Pop+0x44>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	460d      	mov	r5, r1
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000ac4:	4798      	blx	r3
 8000ac6:	b1c8      	cbz	r0, 8000afc <Hw_Uart_Q_Pop+0x40>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <Hw_Uart_Q_Pop+0x48>)
 8000aca:	2021      	movs	r0, #33	; 0x21
 8000acc:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8000ad0:	b219      	sxth	r1, r3
 8000ad2:	fb00 1104 	mla	r1, r0, r4, r1
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <Hw_Uart_Q_Pop+0x4c>)
 8000ad8:	3301      	adds	r3, #1
 8000ada:	5c41      	ldrb	r1, [r0, r1]
 8000adc:	b298      	uxth	r0, r3

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <Hw_Uart_Q_Pop+0x50>)
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000ae0:	7029      	strb	r1, [r5, #0]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000ae2:	b201      	sxth	r1, r0
 8000ae4:	400b      	ands	r3, r1
 8000ae6:	2b00      	cmp	r3, #0
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000ae8:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000aec:	da03      	bge.n	8000af6 <Hw_Uart_Q_Pop+0x3a>
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f063 001f 	orn	r0, r3, #31
 8000af4:	1c43      	adds	r3, r0, #1
 8000af6:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]

    return TRUE;
 8000afa:	2001      	movs	r0, #1
}
 8000afc:	bd38      	pop	{r3, r4, r5, pc}
 8000afe:	bf00      	nop
 8000b00:	08000a29 	.word	0x08000a29
 8000b04:	20000686 	.word	0x20000686
 8000b08:	20000590 	.word	0x20000590
 8000b0c:	8000001f 	.word	0x8000001f

08000b10 <Hw_Led_Off>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
 8000b10:	b130      	cbz	r0, 8000b20 <Hw_Led_Off+0x10>
 8000b12:	2801      	cmp	r0, #1
 8000b14:	d109      	bne.n	8000b2a <Hw_Led_Off+0x1a>
		case 0:
			SET_BIT( REG_GPIOB_ODR, 4 );
			break;

		case 1:
			SET_BIT( REG_GPIOB_ODR, 5 );
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <Hw_Led_Off+0x1c>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	f042 0020 	orr.w	r0, r2, #32
 8000b1e:	e003      	b.n	8000b28 <Hw_Led_Off+0x18>
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 4 );
 8000b20:	4b02      	ldr	r3, [pc, #8]	; (8000b2c <Hw_Led_Off+0x1c>)
 8000b22:	6819      	ldr	r1, [r3, #0]
 8000b24:	f041 0010 	orr.w	r0, r1, #16
			break;

		case 1:
			SET_BIT( REG_GPIOB_ODR, 5 );
 8000b28:	6018      	str	r0, [r3, #0]
 8000b2a:	4770      	bx	lr
 8000b2c:	40010c0c 	.word	0x40010c0c

08000b30 <Hw_Led_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Init( void )
{
 8000b30:	b508      	push	{r3, lr}
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <Hw_Led_Init+0x50>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	f022 60e0 	bic.w	r0, r2, #117440512	; 0x7000000
 8000b3a:	6018      	str	r0, [r3, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 8000b3c:	6819      	ldr	r1, [r3, #0]
 8000b3e:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8000b42:	601a      	str	r2, [r3, #0]
	
	
	
	PinNum = 4;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <Hw_Led_Init+0x54>)
 8000b46:	6818      	ldr	r0, [r3, #0]
 8000b48:	f420 2170 	bic.w	r1, r0, #983040	; 0xf0000
 8000b4c:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	f442 3040 	orr.w	r0, r2, #196608	; 0x30000
 8000b54:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 8000b56:	6819      	ldr	r1, [r3, #0]
 8000b58:	6019      	str	r1, [r3, #0]
	
	PinNum = 5;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*5+0));	// Clear
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	f022 50f0 	bic.w	r0, r2, #503316480	; 0x1e000000
 8000b60:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*5+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8000b62:	6819      	ldr	r1, [r3, #0]
 8000b64:	f041 62c0 	orr.w	r2, r1, #100663296	; 0x6000000
 8000b68:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*5+2));	// CNF,  PB.3 General purpose output push-pul
 8000b6a:	6818      	ldr	r0, [r3, #0]
 8000b6c:	6018      	str	r0, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 4 );
 8000b6e:	68d9      	ldr	r1, [r3, #12]
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*5+0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (PinNum*5+0));	// MODE, PB.3 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (PinNum*5+2));	// CNF,  PB.3 General purpose output push-pul

	Hw_Led_Off(0);
	Hw_Led_Off(1);	
 8000b70:	2001      	movs	r0, #1
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 4 );
 8000b72:	f041 0210 	orr.w	r2, r1, #16
 8000b76:	60da      	str	r2, [r3, #12]
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*5+0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (PinNum*5+0));	// MODE, PB.3 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (PinNum*5+2));	// CNF,  PB.3 General purpose output push-pul

	Hw_Led_Off(0);
	Hw_Led_Off(1);	
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <Hw_Led_Init+0x58>)
 8000b7a:	4798      	blx	r3
 8000b7c:	bd08      	pop	{r3, pc}
 8000b7e:	bf00      	nop
 8000b80:	40010004 	.word	0x40010004
 8000b84:	40010c00 	.word	0x40010c00
 8000b88:	08000b11 	.word	0x08000b11

08000b8c <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 8000b8c:	b130      	cbz	r0, 8000b9c <Hw_Led_Toggle+0x10>
 8000b8e:	2801      	cmp	r0, #1
 8000b90:	d109      	bne.n	8000ba6 <Hw_Led_Toggle+0x1a>
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 4 );
			break;

		case 1:
			TGL_BIT( REG_GPIOB_ODR, 5 );
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <Hw_Led_Toggle+0x1c>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	f082 0020 	eor.w	r0, r2, #32
 8000b9a:	e003      	b.n	8000ba4 <Hw_Led_Toggle+0x18>
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 4 );
 8000b9c:	4b02      	ldr	r3, [pc, #8]	; (8000ba8 <Hw_Led_Toggle+0x1c>)
 8000b9e:	6819      	ldr	r1, [r3, #0]
 8000ba0:	f081 0010 	eor.w	r0, r1, #16
			break;

		case 1:
			TGL_BIT( REG_GPIOB_ODR, 5 );
 8000ba4:	6018      	str	r0, [r3, #0]
 8000ba6:	4770      	bx	lr
 8000ba8:	40010c0c 	.word	0x40010c0c

08000bac <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8000bac:	b508      	push	{r3, lr}
	Hw_VCom_Q_Init();
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <Hw_VCom_Init+0x20>)
 8000bb0:	4798      	blx	r3


	Hw_VCom_RxdFuncPtr = NULL;
 8000bb2:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <Hw_VCom_Init+0x24>)
 8000bb4:	2200      	movs	r2, #0


	//Disable_ISR();
	Set_System();
 8000bb6:	4907      	ldr	r1, [pc, #28]	; (8000bd4 <Hw_VCom_Init+0x28>)
void Hw_VCom_Init( void )
{
	Hw_VCom_Q_Init();


	Hw_VCom_RxdFuncPtr = NULL;
 8000bb8:	6002      	str	r2, [r0, #0]


	//Disable_ISR();
	Set_System();
 8000bba:	4788      	blx	r1

	Set_USBClock();
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <Hw_VCom_Init+0x2c>)
 8000bbe:	4798      	blx	r3
	USB_Interrupts_Config();
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <Hw_VCom_Init+0x30>)
 8000bc2:	4790      	blx	r2
	USB_Init();	
 8000bc4:	4806      	ldr	r0, [pc, #24]	; (8000be0 <Hw_VCom_Init+0x34>)
 8000bc6:	4780      	blx	r0
 8000bc8:	bd08      	pop	{r3, pc}
 8000bca:	bf00      	nop
 8000bcc:	08000c1d 	.word	0x08000c1d
 8000bd0:	200006a4 	.word	0x200006a4
 8000bd4:	08001195 	.word	0x08001195
 8000bd8:	080011b1 	.word	0x080011b1
 8000bdc:	080011c9 	.word	0x080011c9
 8000be0:	08001c51 	.word	0x08001c51

08000be4 <Hw_VCom_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_VCom_Getch( void )
{
 8000be4:	b507      	push	{r0, r1, r2, lr}
	u8 Uart_GetData = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_VCOM_Q_VAILD(0) > 0 ) break;
 8000bec:	2000      	movs	r0, #0
 8000bee:	4906      	ldr	r1, [pc, #24]	; (8000c08 <Hw_VCom_Getch+0x24>)
 8000bf0:	4788      	blx	r1
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d0fa      	beq.n	8000bec <Hw_VCom_Getch+0x8>
	}

	Hw_VCom_Q_Pop( 0, &Uart_GetData );
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f10d 0107 	add.w	r1, sp, #7
 8000bfc:	4a03      	ldr	r2, [pc, #12]	; (8000c0c <Hw_VCom_Getch+0x28>)
 8000bfe:	4790      	blx	r2

	return Uart_GetData;
}
 8000c00:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000c04:	bd0e      	pop	{r1, r2, r3, pc}
 8000c06:	bf00      	nop
 8000c08:	08000c65 	.word	0x08000c65
 8000c0c:	08000ccd 	.word	0x08000ccd

08000c10 <Hw_VCom_Putch>:
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_VCom_Putch( char Uart_PutData )
{
 8000c10:	b508      	push	{r3, lr}
	USB_Send_Data( Uart_PutData );
 8000c12:	4b01      	ldr	r3, [pc, #4]	; (8000c18 <Hw_VCom_Putch+0x8>)
 8000c14:	4798      	blx	r3
 8000c16:	bd08      	pop	{r3, pc}
 8000c18:	08001341 	.word	0x08001341

08000c1c <Hw_VCom_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_VCOM_Q_CH_MAX; i++ )
	{
		Hw_VCom_Q_Start[i] = Hw_VCom_Q_End[i] = 0;
 8000c1c:	4a02      	ldr	r2, [pc, #8]	; (8000c28 <Hw_VCom_Q_Init+0xc>)
 8000c1e:	4803      	ldr	r0, [pc, #12]	; (8000c2c <Hw_VCom_Q_Init+0x10>)
 8000c20:	2300      	movs	r3, #0
 8000c22:	8013      	strh	r3, [r2, #0]
 8000c24:	8003      	strh	r3, [r0, #0]
 8000c26:	4770      	bx	lr
 8000c28:	20000aaa 	.word	0x20000aaa
 8000c2c:	20000aac 	.word	0x20000aac

08000c30 <HW_VCOM_Q_SIZE>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HW_VCOM_Q_SIZE+0x28>)
 8000c32:	490a      	ldr	r1, [pc, #40]	; (8000c5c <HW_VCOM_Q_SIZE+0x2c>)
 8000c34:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8000c38:	f931 0010 	ldrsh.w	r0, [r1, r0, lsl #1]
 8000c3c:	1a13      	subs	r3, r2, r0
 8000c3e:	4808      	ldr	r0, [pc, #32]	; (8000c60 <HW_VCOM_Q_SIZE+0x30>)
 8000c40:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8000c44:	4010      	ands	r0, r2
 8000c46:	2800      	cmp	r0, #0
 8000c48:	da05      	bge.n	8000c56 <HW_VCOM_Q_SIZE+0x26>
 8000c4a:	1e41      	subs	r1, r0, #1
 8000c4c:	ea6f 5081 	mvn.w	r0, r1, lsl #22
 8000c50:	ea6f 5390 	mvn.w	r3, r0, lsr #22
 8000c54:	1c58      	adds	r0, r3, #1
}
 8000c56:	4770      	bx	lr
 8000c58:	20000aac 	.word	0x20000aac
 8000c5c:	20000aaa 	.word	0x20000aaa
 8000c60:	800003ff 	.word	0x800003ff

08000c64 <HW_VCOM_Q_VAILD>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_VAILD( u8 Ch )
{
 8000c64:	b508      	push	{r3, lr}
	return HW_VCOM_Q_SIZE(Ch);
 8000c66:	4b01      	ldr	r3, [pc, #4]	; (8000c6c <HW_VCOM_Q_VAILD+0x8>)
 8000c68:	4798      	blx	r3
}
 8000c6a:	bd08      	pop	{r3, pc}
 8000c6c:	08000c31 	.word	0x08000c31

08000c70 <Hw_VCom_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{
 8000c70:	b538      	push	{r3, r4, r5, lr}

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <Hw_VCom_Q_Push+0x4c>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{
 8000c74:	460d      	mov	r5, r1
 8000c76:	4604      	mov	r4, r0

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;
 8000c78:	4798      	blx	r3
 8000c7a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000c7e:	4288      	cmp	r0, r1
 8000c80:	d019      	beq.n	8000cb6 <Hw_VCom_Q_Push+0x46>

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <Hw_VCom_Q_Push+0x50>)
 8000c84:	eb04 2084 	add.w	r0, r4, r4, lsl #10
 8000c88:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8000c8c:	782d      	ldrb	r5, [r5, #0]
 8000c8e:	b219      	sxth	r1, r3
 8000c90:	1841      	adds	r1, r0, r1
 8000c92:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <Hw_VCom_Q_Push+0x54>)
 8000c94:	3301      	adds	r3, #1
 8000c96:	5445      	strb	r5, [r0, r1]
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <Hw_VCom_Q_Push+0x58>)
 8000c9a:	b219      	sxth	r1, r3
 8000c9c:	4008      	ands	r0, r1
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	da05      	bge.n	8000cae <Hw_VCom_Q_Push+0x3e>
 8000ca2:	3801      	subs	r0, #1
 8000ca4:	ea6f 5380 	mvn.w	r3, r0, lsl #22
 8000ca8:	ea6f 5193 	mvn.w	r1, r3, lsr #22
 8000cac:	1c48      	adds	r0, r1, #1
 8000cae:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]

	return TRUE;
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;
 8000cb6:	2000      	movs	r0, #0

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;

	return TRUE;
}
 8000cb8:	bd38      	pop	{r3, r4, r5, pc}
 8000cba:	bf00      	nop
 8000cbc:	08000c31 	.word	0x08000c31
 8000cc0:	20000aac 	.word	0x20000aac
 8000cc4:	200006a8 	.word	0x200006a8
 8000cc8:	800003ff 	.word	0x800003ff

08000ccc <Hw_VCom_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
 8000ccc:	b538      	push	{r3, r4, r5, lr}
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <Hw_VCom_Q_Pop+0x40>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460d      	mov	r5, r1
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;
 8000cd4:	4798      	blx	r3
 8000cd6:	b1c0      	cbz	r0, 8000d0a <Hw_VCom_Q_Pop+0x3e>

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <Hw_VCom_Q_Pop+0x44>)
 8000cda:	eb04 2084 	add.w	r0, r4, r4, lsl #10
 8000cde:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8000ce2:	b219      	sxth	r1, r3
 8000ce4:	1841      	adds	r1, r0, r1
 8000ce6:	480b      	ldr	r0, [pc, #44]	; (8000d14 <Hw_VCom_Q_Pop+0x48>)
 8000ce8:	3301      	adds	r3, #1
 8000cea:	5c41      	ldrb	r1, [r0, r1]

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8000cec:	b218      	sxth	r0, r3
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 8000cee:	7029      	strb	r1, [r5, #0]

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8000cf0:	4909      	ldr	r1, [pc, #36]	; (8000d18 <Hw_VCom_Q_Pop+0x4c>)
 8000cf2:	4001      	ands	r1, r0
 8000cf4:	2900      	cmp	r1, #0
 8000cf6:	da05      	bge.n	8000d04 <Hw_VCom_Q_Pop+0x38>
 8000cf8:	3901      	subs	r1, #1
 8000cfa:	ea6f 5381 	mvn.w	r3, r1, lsl #22
 8000cfe:	ea6f 5093 	mvn.w	r0, r3, lsr #22
 8000d02:	1c41      	adds	r1, r0, #1
 8000d04:	f822 1014 	strh.w	r1, [r2, r4, lsl #1]

    return TRUE;
 8000d08:	2001      	movs	r0, #1
}
 8000d0a:	bd38      	pop	{r3, r4, r5, pc}
 8000d0c:	08000c31 	.word	0x08000c31
 8000d10:	20000aaa 	.word	0x20000aaa
 8000d14:	200006a8 	.word	0x200006a8
 8000d18:	800003ff 	.word	0x800003ff

08000d1c <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8000d1c:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 8000d1e:	4913      	ldr	r1, [pc, #76]	; (8000d6c <EP1_IN_Callback+0x50>)
 8000d20:	780b      	ldrb	r3, [r1, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d121      	bne.n	8000d6a <EP1_IN_Callback+0x4e>
  {
    if (USART_Rx_length == 0) 
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <EP1_IN_Callback+0x54>)
 8000d28:	6813      	ldr	r3, [r2, #0]
 8000d2a:	b90b      	cbnz	r3, 8000d30 <EP1_IN_Callback+0x14>
    {
      USB_Tx_State = 0;
 8000d2c:	700b      	strb	r3, [r1, #0]
 8000d2e:	bd38      	pop	{r3, r4, r5, pc}
 8000d30:	4c10      	ldr	r4, [pc, #64]	; (8000d74 <EP1_IN_Callback+0x58>)
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8000d32:	2b40      	cmp	r3, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 8000d34:	6820      	ldr	r0, [r4, #0]
 8000d36:	b281      	uxth	r1, r0
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8000d38:	d905      	bls.n	8000d46 <EP1_IN_Callback+0x2a>
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8000d3a:	3040      	adds	r0, #64	; 0x40
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8000d3c:	3b40      	subs	r3, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8000d3e:	6020      	str	r0, [r4, #0]
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8000d40:	6013      	str	r3, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8000d42:	2540      	movs	r5, #64	; 0x40
 8000d44:	e004      	b.n	8000d50 <EP1_IN_Callback+0x34>
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = USART_Rx_length;
 8000d46:	b29d      	uxth	r5, r3
        
        USART_Rx_ptr_out += USART_Rx_length;
 8000d48:	18c3      	adds	r3, r0, r3
        USART_Rx_length = 0;
 8000d4a:	2000      	movs	r0, #0
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
 8000d4c:	6023      	str	r3, [r4, #0]
        USART_Rx_length = 0;
 8000d4e:	6010      	str	r0, [r2, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <EP1_IN_Callback+0x5c>)
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <EP1_IN_Callback+0x60>)
 8000d54:	1850      	adds	r0, r2, r1
 8000d56:	21c0      	movs	r1, #192	; 0xc0
 8000d58:	462a      	mov	r2, r5
 8000d5a:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4629      	mov	r1, r5
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <EP1_IN_Callback+0x64>)
 8000d62:	4790      	blx	r2
      SetEPTxValid(ENDP1); 
 8000d64:	2001      	movs	r0, #1
 8000d66:	4907      	ldr	r1, [pc, #28]	; (8000d84 <EP1_IN_Callback+0x68>)
 8000d68:	4788      	blx	r1
 8000d6a:	bd38      	pop	{r3, r4, r5, pc}
 8000d6c:	200002b8 	.word	0x200002b8
 8000d70:	200002c4 	.word	0x200002c4
 8000d74:	200002c0 	.word	0x200002c0
 8000d78:	20000af2 	.word	0x20000af2
 8000d7c:	08001c89 	.word	0x08001c89
 8000d80:	08001e9d 	.word	0x08001e9d
 8000d84:	08001d79 	.word	0x08001d79

08000d88 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8000d88:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8000d8a:	4c06      	ldr	r4, [pc, #24]	; (8000da4 <EP3_OUT_Callback+0x1c>)
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <EP3_OUT_Callback+0x20>)
 8000d8e:	4621      	mov	r1, r4
 8000d90:	2003      	movs	r0, #3
 8000d92:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 8000d94:	4a05      	ldr	r2, [pc, #20]	; (8000dac <EP3_OUT_Callback+0x24>)
 8000d96:	b2c1      	uxtb	r1, r0
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4790      	blx	r2


  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	4904      	ldr	r1, [pc, #16]	; (8000db0 <EP3_OUT_Callback+0x28>)
 8000da0:	4788      	blx	r1
 8000da2:	bd10      	pop	{r4, pc}
 8000da4:	20000ab0 	.word	0x20000ab0
 8000da8:	08001f41 	.word	0x08001f41
 8000dac:	08001271 	.word	0x08001271
 8000db0:	08001d9b 	.word	0x08001d9b

08000db4 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 8000db4:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <SOF_Callback+0x20>)
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	2805      	cmp	r0, #5
 8000dbc:	d109      	bne.n	8000dd2 <SOF_Callback+0x1e>
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <SOF_Callback+0x24>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	1c51      	adds	r1, r2, #1
 8000dc4:	2a05      	cmp	r2, #5
 8000dc6:	6019      	str	r1, [r3, #0]
 8000dc8:	d103      	bne.n	8000dd2 <SOF_Callback+0x1e>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8000dca:	2000      	movs	r0, #0
 8000dcc:	6018      	str	r0, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 8000dce:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <SOF_Callback+0x28>)
 8000dd0:	4798      	blx	r3
 8000dd2:	bd08      	pop	{r3, pc}
 8000dd4:	200002b4 	.word	0x200002b4
 8000dd8:	200002ac 	.word	0x200002ac
 8000ddc:	080012a5 	.word	0x080012a5

08000de0 <USB_Istr>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8000de0:	b538      	push	{r3, r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <USB_Istr+0x68>)
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <USB_Istr+0x6c>)
 8000de6:	6819      	ldr	r1, [r3, #0]

  //Lb_printf("%x %x %x %x  \r\n", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8000de8:	4d19      	ldr	r5, [pc, #100]	; (8000e50 <USB_Istr+0x70>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8000dea:	b288      	uxth	r0, r1
 8000dec:	8010      	strh	r0, [r2, #0]

  //Lb_printf("%x %x %x %x  \r\n", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8000dee:	8814      	ldrh	r4, [r2, #0]
 8000df0:	8829      	ldrh	r1, [r5, #0]
 8000df2:	4021      	ands	r1, r4
 8000df4:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8000df8:	b282      	uxth	r2, r0
 8000dfa:	b14a      	cbz	r2, 8000e10 <USB_Istr+0x30>
  {
	//Lb_printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8000dfc:	f64f 54ff 	movw	r4, #65023	; 0xfdff
 8000e00:	601c      	str	r4, [r3, #0]
    bIntPackSOF++;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <USB_Istr+0x74>)

#ifdef SOF_CALLBACK
    SOF_Callback();
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <USB_Istr+0x78>)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//Lb_printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8000e06:	781d      	ldrb	r5, [r3, #0]
 8000e08:	1c69      	adds	r1, r5, #1
 8000e0a:	b2c8      	uxtb	r0, r1
 8000e0c:	7018      	strb	r0, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8000e0e:	4790      	blx	r2
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8000e10:	4c0e      	ldr	r4, [pc, #56]	; (8000e4c <USB_Istr+0x6c>)
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <USB_Istr+0x70>)
 8000e14:	8825      	ldrh	r5, [r4, #0]
 8000e16:	8819      	ldrh	r1, [r3, #0]
 8000e18:	4029      	ands	r1, r5
 8000e1a:	f401 4000 	and.w	r0, r1, #32768	; 0x8000
 8000e1e:	b282      	uxth	r2, r0
 8000e20:	4625      	mov	r5, r4
 8000e22:	461c      	mov	r4, r3
 8000e24:	b10a      	cbz	r2, 8000e2a <USB_Istr+0x4a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <USB_Istr+0x7c>)
 8000e28:	4798      	blx	r3
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8000e2a:	8829      	ldrh	r1, [r5, #0]
 8000e2c:	8820      	ldrh	r0, [r4, #0]
 8000e2e:	4008      	ands	r0, r1
 8000e30:	f400 6280 	and.w	r2, r0, #1024	; 0x400
 8000e34:	b293      	uxth	r3, r2
 8000e36:	b133      	cbz	r3, 8000e46 <USB_Istr+0x66>
  {
  	//Lb_printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8000e38:	4803      	ldr	r0, [pc, #12]	; (8000e48 <USB_Istr+0x68>)
    Device_Property.Reset();
 8000e3a:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <USB_Istr+0x80>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//Lb_printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8000e3c:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 8000e40:	6001      	str	r1, [r0, #0]
    Device_Property.Reset();
 8000e42:	6853      	ldr	r3, [r2, #4]
 8000e44:	4798      	blx	r3
 8000e46:	bd38      	pop	{r3, r4, r5, pc}
 8000e48:	40005c44 	.word	0x40005c44
 8000e4c:	20000af0 	.word	0x20000af0
 8000e50:	20001324 	.word	0x20001324
 8000e54:	200002b0 	.word	0x200002b0
 8000e58:	08000db5 	.word	0x08000db5
 8000e5c:	08001f71 	.word	0x08001f71
 8000e60:	2000005c 	.word	0x2000005c

08000e64 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <Virtual_Com_Port_SetConfiguration+0x10>)
 8000e66:	7a98      	ldrb	r0, [r3, #10]
 8000e68:	b110      	cbz	r0, 8000e70 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8000e6a:	4903      	ldr	r1, [pc, #12]	; (8000e78 <Virtual_Com_Port_SetConfiguration+0x14>)
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	600a      	str	r2, [r1, #0]
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20001300 	.word	0x20001300
 8000e78:	200002b4 	.word	0x200002b4

08000e7c <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8000e7c:	4b01      	ldr	r3, [pc, #4]	; (8000e84 <Virtual_Com_Port_SetDeviceAddress+0x8>)
 8000e7e:	2204      	movs	r2, #4
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	4770      	bx	lr
 8000e84:	200002b4 	.word	0x200002b4

08000e88 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <Virtual_Com_Port_Status_In+0x10>)
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	2a20      	cmp	r2, #32
 8000e8e:	d101      	bne.n	8000e94 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8000e90:	2000      	movs	r0, #0
 8000e92:	7018      	strb	r0, [r3, #0]
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200002b1 	.word	0x200002b1

08000e9c <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8000e9c:	4770      	bx	lr
	...

08000ea0 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8000ea0:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8000ea2:	b510      	push	{r4, lr}
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8000ea4:	d108      	bne.n	8000eb8 <Virtual_Com_Port_Data_Setup+0x18>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000ea6:	4811      	ldr	r0, [pc, #68]	; (8000eec <Virtual_Com_Port_Data_Setup+0x4c>)
 8000ea8:	6803      	ldr	r3, [r0, #0]
 8000eaa:	7819      	ldrb	r1, [r3, #0]
 8000eac:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8000eb0:	2a21      	cmp	r2, #33	; 0x21
 8000eb2:	d011      	beq.n	8000ed8 <Virtual_Com_Port_Data_Setup+0x38>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	bd10      	pop	{r4, pc}
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8000eb8:	2820      	cmp	r0, #32
 8000eba:	d1fb      	bne.n	8000eb4 <Virtual_Com_Port_Data_Setup+0x14>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <Virtual_Com_Port_Data_Setup+0x4c>)
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	780a      	ldrb	r2, [r1, #0]
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 8000ec2:	490b      	ldr	r1, [pc, #44]	; (8000ef0 <Virtual_Com_Port_Data_Setup+0x50>)
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000ec4:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <Virtual_Com_Port_Data_Setup+0x54>)
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 8000eca:	2b21      	cmp	r3, #33	; 0x21
 8000ecc:	bf0c      	ite	eq
 8000ece:	460b      	moveq	r3, r1
 8000ed0:	2300      	movne	r3, #0
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8000ed2:	7010      	strb	r0, [r2, #0]
  }

  if (CopyRoutine == NULL)
 8000ed4:	b90b      	cbnz	r3, 8000eda <Virtual_Com_Port_Data_Setup+0x3a>
 8000ed6:	e7ed      	b.n	8000eb4 <Virtual_Com_Port_Data_Setup+0x14>

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <Virtual_Com_Port_Data_Setup+0x58>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000eda:	4c04      	ldr	r4, [pc, #16]	; (8000eec <Virtual_Com_Port_Data_Setup+0x4c>)
 8000edc:	6820      	ldr	r0, [r4, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000ede:	2400      	movs	r4, #0
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000ee0:	6183      	str	r3, [r0, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000ee2:	8244      	strh	r4, [r0, #18]
  (*CopyRoutine)(0);
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	4798      	blx	r3
  return USB_SUCCESS;
 8000ee8:	4620      	mov	r0, r4
}
 8000eea:	bd10      	pop	{r4, pc}
 8000eec:	20001320 	.word	0x20001320
 8000ef0:	08000f49 	.word	0x08000f49
 8000ef4:	200002b1 	.word	0x200002b1
 8000ef8:	08000f31 	.word	0x08000f31

08000efc <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <Virtual_Com_Port_NoData_Setup+0x20>)
 8000efe:	6819      	ldr	r1, [r3, #0]
 8000f00:	780a      	ldrb	r2, [r1, #0]
 8000f02:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8000f06:	2b21      	cmp	r3, #33	; 0x21
 8000f08:	d105      	bne.n	8000f16 <Virtual_Com_Port_NoData_Setup+0x1a>
  {
    if (RequestNo == SET_COMM_FEATURE)
 8000f0a:	2802      	cmp	r0, #2
 8000f0c:	d101      	bne.n	8000f12 <Virtual_Com_Port_NoData_Setup+0x16>
    {
      return USB_SUCCESS;
 8000f0e:	2000      	movs	r0, #0
 8000f10:	4770      	bx	lr
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 8000f12:	2822      	cmp	r0, #34	; 0x22
 8000f14:	d0fb      	beq.n	8000f0e <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8000f16:	2002      	movs	r0, #2
}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20001320 	.word	0x20001320

08000f20 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8000f20:	b109      	cbz	r1, 8000f26 <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 8000f22:	2002      	movs	r0, #2
 8000f24:	4770      	bx	lr
  }
  else if (Interface > 1)
 8000f26:	2801      	cmp	r0, #1
 8000f28:	d8fb      	bhi.n	8000f22 <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 8000f2a:	4608      	mov	r0, r1
}
 8000f2c:	4770      	bx	lr
	...

08000f30 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8000f30:	b920      	cbnz	r0, 8000f3c <Virtual_Com_Port_GetLineCoding+0xc>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8000f32:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <Virtual_Com_Port_GetLineCoding+0x10>)
 8000f34:	2208      	movs	r2, #8
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	820a      	strh	r2, [r1, #16]
    return NULL;
 8000f3a:	4770      	bx	lr
  }
  return(uint8_t *)&linecoding;
 8000f3c:	4801      	ldr	r0, [pc, #4]	; (8000f44 <Virtual_Com_Port_GetLineCoding+0x14>)
}
 8000f3e:	4770      	bx	lr
 8000f40:	20001320 	.word	0x20001320
 8000f44:	200000d8 	.word	0x200000d8

08000f48 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8000f48:	b920      	cbnz	r0, 8000f54 <Virtual_Com_Port_SetLineCoding+0xc>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8000f4a:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <Virtual_Com_Port_SetLineCoding+0x10>)
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	6819      	ldr	r1, [r3, #0]
 8000f50:	820a      	strh	r2, [r1, #16]
    return NULL;
 8000f52:	4770      	bx	lr
  }
  return(uint8_t *)&linecoding;
 8000f54:	4801      	ldr	r0, [pc, #4]	; (8000f5c <Virtual_Com_Port_SetLineCoding+0x14>)
}
 8000f56:	4770      	bx	lr
 8000f58:	20001320 	.word	0x20001320
 8000f5c:	200000d8 	.word	0x200000d8

08000f60 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 8000f60:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8000f64:	6819      	ldr	r1, [r3, #0]
 8000f66:	78ca      	ldrb	r2, [r1, #3]
  if (wValue0 > 4)
 8000f68:	2a04      	cmp	r2, #4
 8000f6a:	d805      	bhi.n	8000f78 <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 8000f6e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 8000f74:	4790      	blx	r2
 8000f76:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 8000f78:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 8000f7a:	bd08      	pop	{r3, pc}
 8000f7c:	20001320 	.word	0x20001320
 8000f80:	200000b8 	.word	0x200000b8
 8000f84:	08001755 	.word	0x08001755

08000f88 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8000f88:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8000f8a:	4902      	ldr	r1, [pc, #8]	; (8000f94 <Virtual_Com_Port_GetConfigDescriptor+0xc>)
 8000f8c:	4b02      	ldr	r3, [pc, #8]	; (8000f98 <Virtual_Com_Port_GetConfigDescriptor+0x10>)
 8000f8e:	4798      	blx	r3
}
 8000f90:	bd08      	pop	{r3, pc}
 8000f92:	bf00      	nop
 8000f94:	20000054 	.word	0x20000054
 8000f98:	08001755 	.word	0x08001755

08000f9c <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8000f9c:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8000f9e:	4902      	ldr	r1, [pc, #8]	; (8000fa8 <Virtual_Com_Port_GetDeviceDescriptor+0xc>)
 8000fa0:	4b02      	ldr	r3, [pc, #8]	; (8000fac <Virtual_Com_Port_GetDeviceDescriptor+0x10>)
 8000fa2:	4798      	blx	r3
}
 8000fa4:	bd08      	pop	{r3, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200000b0 	.word	0x200000b0
 8000fac:	08001755 	.word	0x08001755

08000fb0 <Virtual_Com_Port_Reset>:
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8000fb0:	4a30      	ldr	r2, [pc, #192]	; (8001074 <Virtual_Com_Port_Reset+0xc4>)
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8000fb2:	4b31      	ldr	r3, [pc, #196]	; (8001078 <Virtual_Com_Port_Reset+0xc8>)

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8000fb4:	79d1      	ldrb	r1, [r2, #7]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8000fb6:	6818      	ldr	r0, [r3, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8000fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8000fbc:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8000fbe:	7241      	strb	r1, [r0, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8000fc0:	7284      	strb	r4, [r0, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8000fc2:	72c4      	strb	r4, [r0, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8000fc4:	4d2d      	ldr	r5, [pc, #180]	; (800107c <Virtual_Com_Port_Reset+0xcc>)
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	47a8      	blx	r5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8000fca:	4e2d      	ldr	r6, [pc, #180]	; (8001080 <Virtual_Com_Port_Reset+0xd0>)
 8000fcc:	4620      	mov	r0, r4
 8000fce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd2:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8000fd4:	4d2b      	ldr	r5, [pc, #172]	; (8001084 <Virtual_Com_Port_Reset+0xd4>)
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	4620      	mov	r0, r4
 8000fda:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000fdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80010a0 <Virtual_Com_Port_Reset+0xf0>
 8000fe0:	2140      	movs	r1, #64	; 0x40
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8000fe6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80010a4 <Virtual_Com_Port_Reset+0xf4>
 8000fea:	2180      	movs	r1, #128	; 0x80
 8000fec:	4620      	mov	r0, r4
 8000fee:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8000ff0:	4f25      	ldr	r7, [pc, #148]	; (8001088 <Virtual_Com_Port_Reset+0xd8>)
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	47b8      	blx	r7
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <Virtual_Com_Port_Reset+0xdc>)
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8000ffe:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80010a8 <Virtual_Com_Port_Reset+0xf8>
 8001002:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 8001004:	4a22      	ldr	r2, [pc, #136]	; (8001090 <Virtual_Com_Port_Reset+0xe0>)
 8001006:	4620      	mov	r0, r4
 8001008:	4790      	blx	r2

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 800100a:	2001      	movs	r0, #1
 800100c:	4621      	mov	r1, r4
 800100e:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8001010:	2001      	movs	r0, #1
 8001012:	21c0      	movs	r1, #192	; 0xc0
 8001014:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8001016:	2001      	movs	r0, #1
 8001018:	2120      	movs	r1, #32
 800101a:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800101c:	4f1d      	ldr	r7, [pc, #116]	; (8001094 <Virtual_Com_Port_Reset+0xe4>)
 800101e:	2001      	movs	r0, #1
 8001020:	4621      	mov	r1, r4
 8001022:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8001024:	2002      	movs	r0, #2
 8001026:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800102a:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800102c:	2002      	movs	r0, #2
 800102e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001032:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8001034:	2002      	movs	r0, #2
 8001036:	4621      	mov	r1, r4
 8001038:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 800103a:	2002      	movs	r0, #2
 800103c:	2120      	movs	r1, #32
 800103e:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8001040:	2003      	movs	r0, #3
 8001042:	4621      	mov	r1, r4
 8001044:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8001046:	2003      	movs	r0, #3
 8001048:	f44f 7188 	mov.w	r1, #272	; 0x110
 800104c:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800104e:	2003      	movs	r0, #3
 8001050:	2140      	movs	r1, #64	; 0x40
 8001052:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8001054:	2003      	movs	r0, #3
 8001056:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800105a:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800105c:	2003      	movs	r0, #3
 800105e:	4621      	mov	r1, r4
 8001060:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8001062:	4620      	mov	r0, r4
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <Virtual_Com_Port_Reset+0xe8>)
 8001066:	4788      	blx	r1
  
  bDeviceState = ATTACHED;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <Virtual_Com_Port_Reset+0xec>)
 800106a:	2001      	movs	r0, #1
 800106c:	6018      	str	r0, [r3, #0]
 800106e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001072:	bf00      	nop
 8001074:	080022c7 	.word	0x080022c7
 8001078:	20001320 	.word	0x20001320
 800107c:	08001cdd 	.word	0x08001cdd
 8001080:	08001ced 	.word	0x08001ced
 8001084:	08001d05 	.word	0x08001d05
 8001088:	08001dbd 	.word	0x08001dbd
 800108c:	2000005c 	.word	0x2000005c
 8001090:	08001d9b 	.word	0x08001d9b
 8001094:	08001d3f 	.word	0x08001d3f
 8001098:	08001ba5 	.word	0x08001ba5
 800109c:	200002b4 	.word	0x200002b4
 80010a0:	08001e45 	.word	0x08001e45
 80010a4:	08001e25 	.word	0x08001e25
 80010a8:	08001eb9 	.word	0x08001eb9

080010ac <Virtual_Com_Port_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 80010ac:	b510      	push	{r4, lr}


  PowerOff();
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <Virtual_Com_Port_init+0x28>)
 80010b0:	4798      	blx	r3
  
  Hw_Timer_Delay_ms(50);
 80010b2:	4909      	ldr	r1, [pc, #36]	; (80010d8 <Virtual_Com_Port_init+0x2c>)
 80010b4:	2032      	movs	r0, #50	; 0x32
 80010b6:	4788      	blx	r1


  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <Virtual_Com_Port_init+0x30>)
 80010ba:	4780      	blx	r0

  pInformation->Current_Configuration = 0;
 80010bc:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <Virtual_Com_Port_init+0x34>)
 80010be:	2400      	movs	r4, #0
 80010c0:	6813      	ldr	r3, [r2, #0]

  //Lb_printf("a");
  /* Connect the device */
  PowerOn();
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <Virtual_Com_Port_init+0x38>)

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 80010c4:	729c      	strb	r4, [r3, #10]

  //Lb_printf("a");
  /* Connect the device */
  PowerOn();
 80010c6:	4788      	blx	r1

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 80010c8:	4807      	ldr	r0, [pc, #28]	; (80010e8 <Virtual_Com_Port_init+0x3c>)
 80010ca:	4780      	blx	r0

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <Virtual_Com_Port_init+0x40>)
 80010ce:	6014      	str	r4, [r2, #0]
 80010d0:	bd10      	pop	{r4, pc}
 80010d2:	bf00      	nop
 80010d4:	08001125 	.word	0x08001125
 80010d8:	080009f9 	.word	0x080009f9
 80010dc:	08001371 	.word	0x08001371
 80010e0:	20001320 	.word	0x20001320
 80010e4:	080010f1 	.word	0x080010f1
 80010e8:	08001f21 	.word	0x08001f21
 80010ec:	200002b4 	.word	0x200002b4

080010f0 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 80010f0:	b508      	push	{r3, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 80010f2:	2001      	movs	r0, #1
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <PowerOn+0x24>)
 80010f6:	4798      	blx	r3

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <PowerOn+0x28>)

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80010fa:	4908      	ldr	r1, [pc, #32]	; (800111c <PowerOn+0x2c>)
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80010fc:	2201      	movs	r2, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 80010fe:	2000      	movs	r0, #0
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001100:	601a      	str	r2, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8001102:	6018      	str	r0, [r3, #0]
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8001104:	6008      	str	r0, [r1, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8001106:	4906      	ldr	r1, [pc, #24]	; (8001120 <PowerOn+0x30>)
 8001108:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800110c:	800a      	strh	r2, [r1, #0]
  _SetCNTR(wInterrupt_Mask);
 800110e:	601a      	str	r2, [r3, #0]
  
  return USB_SUCCESS;
}
 8001110:	bd08      	pop	{r3, pc}
 8001112:	bf00      	nop
 8001114:	08001259 	.word	0x08001259
 8001118:	40005c40 	.word	0x40005c40
 800111c:	40005c44 	.word	0x40005c44
 8001120:	20001324 	.word	0x20001324

08001124 <PowerOff>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOff()
{
 8001124:	b538      	push	{r3, r4, r5, lr}
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
  /* clear interrupt status register */
  _SetISTR(0);
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <PowerOff+0x1c>)
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOff()
{
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
 8001128:	4d06      	ldr	r5, [pc, #24]	; (8001144 <PowerOff+0x20>)
  /* clear interrupt status register */
  _SetISTR(0);
 800112a:	2400      	movs	r4, #0
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOff()
{
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
 800112c:	2301      	movs	r3, #1
 800112e:	602b      	str	r3, [r5, #0]
  /* clear interrupt status register */
  _SetISTR(0);
  /* Disable the Pull-Up*/
  USB_Cable_Config(DISABLE);
 8001130:	4905      	ldr	r1, [pc, #20]	; (8001148 <PowerOff+0x24>)
RESULT PowerOff()
{
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
  /* clear interrupt status register */
  _SetISTR(0);
 8001132:	6004      	str	r4, [r0, #0]
  /* Disable the Pull-Up*/
  USB_Cable_Config(DISABLE);
 8001134:	4620      	mov	r0, r4
 8001136:	4788      	blx	r1
  /* switch-off device */
  _SetCNTR(CNTR_FRES + CNTR_PDWN);
 8001138:	2203      	movs	r2, #3
 800113a:	602a      	str	r2, [r5, #0]
  /* sw variables reset */
  /* ... */

  return USB_SUCCESS;
}
 800113c:	4620      	mov	r0, r4
 800113e:	bd38      	pop	{r3, r4, r5, pc}
 8001140:	40005c44 	.word	0x40005c44
 8001144:	40005c40 	.word	0x40005c40
 8001148:	08001259 	.word	0x08001259

0800114c <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 800114c:	4b02      	ldr	r3, [pc, #8]	; (8001158 <USBWakeUp_IRQHandler+0xc>)
 800114e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40010414 	.word	0x40010414

0800115c <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 800115c:	b510      	push	{r4, lr}
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800115e:	3101      	adds	r1, #1
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001160:	2300      	movs	r3, #0
 8001162:	4293      	cmp	r3, r2
 8001164:	d00e      	beq.n	8001184 <IntToUnicode+0x28>
  {
    if( ((value >> 28)) < 0xA )
 8001166:	0f04      	lsrs	r4, r0, #28
 8001168:	2c09      	cmp	r4, #9
 800116a:	d801      	bhi.n	8001170 <IntToUnicode+0x14>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800116c:	3430      	adds	r4, #48	; 0x30
 800116e:	e000      	b.n	8001172 <IntToUnicode+0x16>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8001170:	3437      	adds	r4, #55	; 0x37
 8001172:	f801 4c01 	strb.w	r4, [r1, #-1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001176:	3301      	adds	r3, #1
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8001178:	2400      	movs	r4, #0
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 800117a:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 800117c:	f801 4b02 	strb.w	r4, [r1], #2
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001180:	b2db      	uxtb	r3, r3
 8001182:	e7ee      	b.n	8001162 <IntToUnicode+0x6>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8001184:	bd10      	pop	{r4, pc}
	...

08001188 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 8001188:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 800118a:	4b01      	ldr	r3, [pc, #4]	; (8001190 <USB_LP_IRQHandler+0x8>)
 800118c:	4798      	blx	r3
 800118e:	bd08      	pop	{r3, pc}
 8001190:	08000de1 	.word	0x08000de1

08001194 <Set_System>:
{  	


  
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <Set_System+0x18>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	f422 0070 	bic.w	r0, r2, #15728640	; 0xf00000
 800119c:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 800119e:	6819      	ldr	r1, [r3, #0]
 80011a0:	f441 1200 	orr.w	r2, r1, #2097152	; 0x200000
 80011a4:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	6018      	str	r0, [r3, #0]
 80011aa:	4770      	bx	lr
 80011ac:	40011004 	.word	0x40011004

080011b0 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <Set_USBClock+0x14>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	f422 0080 	bic.w	r0, r2, #4194304	; 0x400000
 80011b8:	6018      	str	r0, [r3, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 80011ba:	6999      	ldr	r1, [r3, #24]
 80011bc:	f441 0200 	orr.w	r2, r1, #8388608	; 0x800000
 80011c0:	619a      	str	r2, [r3, #24]
 80011c2:	4770      	bx	lr
 80011c4:	40021004 	.word	0x40021004

080011c8 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <USB_Interrupts_Config+0x70>)
 80011ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 80011ce:	b510      	push	{r4, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 80011d0:	601a      	str	r2, [r3, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 80011d2:	f853 0c14 	ldr.w	r0, [r3, #-20]
	CLR_BIT( REG_EXTI_EMR,  18 );
 80011d6:	4c19      	ldr	r4, [pc, #100]	; (800123c <USB_Interrupts_Config+0x74>)

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 80011d8:	f420 2180 	bic.w	r1, r0, #262144	; 0x40000
 80011dc:	f843 1c14 	str.w	r1, [r3, #-20]
	CLR_BIT( REG_EXTI_EMR,  18 );
 80011e0:	6822      	ldr	r2, [r4, #0]
 80011e2:	f422 2080 	bic.w	r0, r2, #262144	; 0x40000
 80011e6:	6020      	str	r0, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 80011e8:	6861      	ldr	r1, [r4, #4]
 80011ea:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 80011ee:	6062      	str	r2, [r4, #4]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 80011f0:	68a0      	ldr	r0, [r4, #8]
 80011f2:	f420 2180 	bic.w	r1, r0, #262144	; 0x40000
 80011f6:	60a1      	str	r1, [r4, #8]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80011f8:	f853 4c14 	ldr.w	r4, [r3, #-20]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80011fc:	2090      	movs	r0, #144	; 0x90
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80011fe:	f444 2280 	orr.w	r2, r4, #262144	; 0x40000
 8001202:	f843 2c14 	str.w	r2, [r3, #-20]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8001206:	490e      	ldr	r1, [pc, #56]	; (8001240 <USB_Interrupts_Config+0x78>)
 8001208:	2200      	movs	r2, #0
 800120a:	4c0e      	ldr	r4, [pc, #56]	; (8001244 <USB_Interrupts_Config+0x7c>)
 800120c:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <USB_Interrupts_Config+0x80>)
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8001210:	2200      	movs	r2, #0
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	f440 1180 	orr.w	r1, r0, #1048576	; 0x100000
 8001218:	6019      	str	r1, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 800121a:	20e8      	movs	r0, #232	; 0xe8
 800121c:	490b      	ldr	r1, [pc, #44]	; (800124c <USB_Interrupts_Config+0x84>)
 800121e:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <USB_Interrupts_Config+0x88>)

	SET_BIT( REG_EXTI_SWIER, 18 );
 8001222:	490c      	ldr	r1, [pc, #48]	; (8001254 <USB_Interrupts_Config+0x8c>)
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	f442 6080 	orr.w	r0, r2, #1024	; 0x400
 800122a:	6018      	str	r0, [r3, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 800122c:	680b      	ldr	r3, [r1, #0]
 800122e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001232:	600a      	str	r2, [r1, #0]
 8001234:	bd10      	pop	{r4, pc}
 8001236:	bf00      	nop
 8001238:	40010414 	.word	0x40010414
 800123c:	40010404 	.word	0x40010404
 8001240:	08001189 	.word	0x08001189
 8001244:	080008b1 	.word	0x080008b1
 8001248:	e000e100 	.word	0xe000e100
 800124c:	0800114d 	.word	0x0800114d
 8001250:	e000e104 	.word	0xe000e104
 8001254:	40010410 	.word	0x40010410

08001258 <USB_Cable_Config>:
* Description    : Software Connection/Disconnection of USB Cable
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <USB_Cable_Config+0x14>)
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 800125a:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 800125c:	b110      	cbz	r0, 8001264 <USB_Cable_Config+0xc>
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 800125e:	f422 5000 	bic.w	r0, r2, #8192	; 0x2000
 8001262:	e001      	b.n	8001268 <USB_Cable_Config+0x10>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 8001264:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
 8001268:	6018      	str	r0, [r3, #0]
 800126a:	4770      	bx	lr
 800126c:	4001100c 	.word	0x4001100c

08001270 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8001270:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001272:	4606      	mov	r6, r0
 8001274:	460d      	mov	r5, r1
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001276:	2400      	movs	r4, #0
 8001278:	42ac      	cmp	r4, r5
 800127a:	d20e      	bcs.n	800129a <USB_To_USART_Send_Data+0x2a>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800127c:	5d32      	ldrb	r2, [r6, r4]
 800127e:	a902      	add	r1, sp, #8
 8001280:	f801 2d01 	strb.w	r2, [r1, #-1]!
    Hw_VCom_Q_Push( 0, &UartData );	//
 8001284:	2000      	movs	r0, #0
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <USB_To_USART_Send_Data+0x2c>)
 8001288:	4798      	blx	r3

    if( Hw_VCom_RxdFuncPtr != NULL )
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <USB_To_USART_Send_Data+0x30>)
 800128c:	6801      	ldr	r1, [r0, #0]
 800128e:	b111      	cbz	r1, 8001296 <USB_To_USART_Send_Data+0x26>
    {
      Hw_VCom_RxdFuncPtr( UartData );      
 8001290:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001294:	4788      	blx	r1
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001296:	3401      	adds	r4, #1
 8001298:	e7ee      	b.n	8001278 <USB_To_USART_Send_Data+0x8>
    if( Hw_VCom_RxdFuncPtr != NULL )
    {
      Hw_VCom_RxdFuncPtr( UartData );      
    }
  }  
}
 800129a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 800129c:	08000c71 	.word	0x08000c71
 80012a0:	200006a4 	.word	0x200006a4

080012a4 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 80012a4:	b538      	push	{r3, r4, r5, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 80012a6:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <Handle_USBAsynchXfer+0x7c>)
 80012a8:	7818      	ldrb	r0, [r3, #0]
 80012aa:	2801      	cmp	r0, #1
 80012ac:	d037      	beq.n	800131e <Handle_USBAsynchXfer+0x7a>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 80012ae:	491d      	ldr	r1, [pc, #116]	; (8001324 <Handle_USBAsynchXfer+0x80>)
 80012b0:	680a      	ldr	r2, [r1, #0]
 80012b2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80012b6:	d101      	bne.n	80012bc <Handle_USBAsynchXfer+0x18>
    {
      USART_Rx_ptr_out = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	600b      	str	r3, [r1, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80012bc:	481a      	ldr	r0, [pc, #104]	; (8001328 <Handle_USBAsynchXfer+0x84>)
 80012be:	680b      	ldr	r3, [r1, #0]
 80012c0:	6801      	ldr	r1, [r0, #0]
 80012c2:	428b      	cmp	r3, r1
 80012c4:	d103      	bne.n	80012ce <Handle_USBAsynchXfer+0x2a>
    {
      USB_Tx_State = 0; 
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <Handle_USBAsynchXfer+0x7c>)
 80012c8:	2000      	movs	r0, #0
 80012ca:	7018      	strb	r0, [r3, #0]
      return;
 80012cc:	bd38      	pop	{r3, r4, r5, pc}
 80012ce:	4c17      	ldr	r4, [pc, #92]	; (800132c <Handle_USBAsynchXfer+0x88>)
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 80012d0:	bf8c      	ite	hi
 80012d2:	f5c3 6100 	rsbhi	r1, r3, #2048	; 0x800
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 80012d6:	ebc3 0101 	rsbls	r1, r3, r1
 80012da:	6021      	str	r1, [r4, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80012dc:	6824      	ldr	r4, [r4, #0]
 80012de:	4913      	ldr	r1, [pc, #76]	; (800132c <Handle_USBAsynchXfer+0x88>)
 80012e0:	2c40      	cmp	r4, #64	; 0x40
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <Handle_USBAsynchXfer+0x80>)
 80012e4:	b298      	uxth	r0, r3
 80012e6:	d905      	bls.n	80012f4 <Handle_USBAsynchXfer+0x50>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 80012e8:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 80012ea:	3c40      	subs	r4, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 80012ec:	6013      	str	r3, [r2, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 80012ee:	600c      	str	r4, [r1, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 80012f0:	2540      	movs	r5, #64	; 0x40
 80012f2:	e004      	b.n	80012fe <Handle_USBAsynchXfer+0x5a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 80012f4:	18e3      	adds	r3, r4, r3
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 80012f6:	b2a5      	uxth	r5, r4
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 80012f8:	2400      	movs	r4, #0
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 80012fa:	6013      	str	r3, [r2, #0]
      USART_Rx_length = 0;
 80012fc:	600c      	str	r4, [r1, #0]
    }
    USB_Tx_State = 1; 
 80012fe:	4908      	ldr	r1, [pc, #32]	; (8001320 <Handle_USBAsynchXfer+0x7c>)
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <Handle_USBAsynchXfer+0x8c>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8001302:	2401      	movs	r4, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001304:	1810      	adds	r0, r2, r0
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8001306:	700c      	strb	r4, [r1, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001308:	462a      	mov	r2, r5
 800130a:	21c0      	movs	r1, #192	; 0xc0
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <Handle_USBAsynchXfer+0x90>)
 800130e:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	4a08      	ldr	r2, [pc, #32]	; (8001338 <Handle_USBAsynchXfer+0x94>)
 8001316:	4790      	blx	r2
    SetEPTxValid(ENDP1); 
 8001318:	4620      	mov	r0, r4
 800131a:	4908      	ldr	r1, [pc, #32]	; (800133c <Handle_USBAsynchXfer+0x98>)
 800131c:	4788      	blx	r1
 800131e:	bd38      	pop	{r3, r4, r5, pc}
 8001320:	200002b8 	.word	0x200002b8
 8001324:	200002c0 	.word	0x200002c0
 8001328:	200002bc 	.word	0x200002bc
 800132c:	200002c4 	.word	0x200002c4
 8001330:	20000af2 	.word	0x20000af2
 8001334:	08001c89 	.word	0x08001c89
 8001338:	08001e9d 	.word	0x08001e9d
 800133c:	08001d79 	.word	0x08001d79

08001340 <USB_Send_Data>:
	
	//-- 전송 버퍼가 꽉 차면 기다린다.
	//
	while(1)
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <USB_Send_Data+0x24>)
 8001342:	6819      	ldr	r1, [r3, #0]
 8001344:	1c4a      	adds	r2, r1, #1
 8001346:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800134a:	d20a      	bcs.n	8001362 <USB_Send_Data+0x22>
	}
	
	
	USART_Rx_Buffer[USART_Rx_ptr_in] = SendData;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <USB_Send_Data+0x28>)
 800134e:	4907      	ldr	r1, [pc, #28]	; (800136c <USB_Send_Data+0x2c>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	5488      	strb	r0, [r1, r2]
	USART_Rx_ptr_in++;
 8001354:	1c50      	adds	r0, r2, #1
  
	/* To avoid buffer overflow */
	if(USART_Rx_ptr_in == USART_RX_DATA_SIZE)
 8001356:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
	{
		USART_Rx_ptr_in = 0;
 800135a:	bf08      	it	eq
 800135c:	2000      	moveq	r0, #0
 800135e:	6018      	str	r0, [r3, #0]
 8001360:	4770      	bx	lr
 8001362:	e7fe      	b.n	8001362 <USB_Send_Data+0x22>
 8001364:	200002c4 	.word	0x200002c4
 8001368:	200002bc 	.word	0x200002bc
 800136c:	20000af2 	.word	0x20000af2

08001370 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 8001370:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <Get_SerialNum+0x24>)
  Device_Serial1 = *(uint32_t*)ID2;
 8001374:	e893 0024 	ldmia.w	r3, {r2, r5}
  Device_Serial2 = *(uint32_t*)ID3;  
 8001378:	3308      	adds	r3, #8

  Device_Serial0 += Device_Serial2;
 800137a:	6818      	ldr	r0, [r3, #0]

  if (Device_Serial0 != 0)
 800137c:	1810      	adds	r0, r2, r0
 800137e:	d007      	beq.n	8001390 <Get_SerialNum+0x20>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 8001380:	4905      	ldr	r1, [pc, #20]	; (8001398 <Get_SerialNum+0x28>)
 8001382:	2208      	movs	r2, #8
 8001384:	4c05      	ldr	r4, [pc, #20]	; (800139c <Get_SerialNum+0x2c>)
 8001386:	47a0      	blx	r4
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8001388:	4628      	mov	r0, r5
 800138a:	4905      	ldr	r1, [pc, #20]	; (80013a0 <Get_SerialNum+0x30>)
 800138c:	2204      	movs	r2, #4
 800138e:	47a0      	blx	r4
 8001390:	bd38      	pop	{r3, r4, r5, pc}
 8001392:	bf00      	nop
 8001394:	1ffff7e8 	.word	0x1ffff7e8
 8001398:	20000002 	.word	0x20000002
 800139c:	0800115d 	.word	0x0800115d
 80013a0:	20000012 	.word	0x20000012

080013a4 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 80013a4:	b510      	push	{r4, lr}
 80013a6:	4c06      	ldr	r4, [pc, #24]	; (80013c0 <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 80013a8:	b918      	cbnz	r0, 80013b2 <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	2201      	movs	r2, #1
 80013ae:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 80013b0:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <Standard_GetConfiguration+0x20>)
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	6801      	ldr	r1, [r0, #0]
 80013b8:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_Configuration;
 80013ba:	6820      	ldr	r0, [r4, #0]
 80013bc:	300a      	adds	r0, #10
}
 80013be:	bd10      	pop	{r4, pc}
 80013c0:	20001320 	.word	0x20001320
 80013c4:	2000131c 	.word	0x2000131c

080013c8 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 80013c8:	b510      	push	{r4, lr}
 80013ca:	4c06      	ldr	r4, [pc, #24]	; (80013e4 <Standard_GetInterface+0x1c>)
  if (Length == 0)
 80013cc:	b918      	cbnz	r0, 80013d6 <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	2201      	movs	r2, #1
 80013d2:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 80013d4:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <Standard_GetInterface+0x20>)
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	6881      	ldr	r1, [r0, #8]
 80013dc:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 80013de:	6820      	ldr	r0, [r4, #0]
 80013e0:	300c      	adds	r0, #12
}
 80013e2:	bd10      	pop	{r4, pc}
 80013e4:	20001320 	.word	0x20001320
 80013e8:	2000131c 	.word	0x2000131c

080013ec <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 80013ec:	b508      	push	{r3, lr}
 80013ee:	4a23      	ldr	r2, [pc, #140]	; (800147c <Standard_GetStatus+0x90>)
  if (Length == 0)
 80013f0:	b918      	cbnz	r0, 80013fa <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80013f2:	6813      	ldr	r3, [r2, #0]
 80013f4:	2202      	movs	r2, #2
 80013f6:	821a      	strh	r2, [r3, #16]
    return 0;
 80013f8:	bd08      	pop	{r3, pc}
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <Standard_GetStatus+0x94>)
 80013fc:	2000      	movs	r0, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80013fe:	6812      	ldr	r2, [r2, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8001400:	8018      	strh	r0, [r3, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001402:	7811      	ldrb	r1, [r2, #0]
 8001404:	f011 017f 	ands.w	r1, r1, #127	; 0x7f
 8001408:	d113      	bne.n	8001432 <Standard_GetStatus+0x46>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 800140a:	7a50      	ldrb	r0, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800140c:	f000 0220 	and.w	r2, r0, #32
 8001410:	b2d1      	uxtb	r1, r2
 8001412:	b109      	cbz	r1, 8001418 <Standard_GetStatus+0x2c>
    {
      SetBit(StatusInfo0, 1);
 8001414:	2202      	movs	r2, #2
 8001416:	701a      	strb	r2, [r3, #0]
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8001418:	f000 0340 	and.w	r3, r0, #64	; 0x40
 800141c:	b2d8      	uxtb	r0, r3
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <Standard_GetStatus+0x94>)
 8001420:	b118      	cbz	r0, 800142a <Standard_GetStatus+0x3e>
    {
      SetBit(StatusInfo0, 0);
 8001422:	781a      	ldrb	r2, [r3, #0]
 8001424:	f042 0101 	orr.w	r1, r2, #1
 8001428:	e01e      	b.n	8001468 <Standard_GetStatus+0x7c>
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 800142a:	7819      	ldrb	r1, [r3, #0]
 800142c:	f021 0101 	bic.w	r1, r1, #1
 8001430:	e01a      	b.n	8001468 <Standard_GetStatus+0x7c>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001432:	2901      	cmp	r1, #1
 8001434:	d01f      	beq.n	8001476 <Standard_GetStatus+0x8a>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001436:	2902      	cmp	r1, #2
 8001438:	d11e      	bne.n	8001478 <Standard_GetStatus+0x8c>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800143a:	7950      	ldrb	r0, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 800143c:	f000 020f 	and.w	r2, r0, #15
 8001440:	ea4f 0182 	mov.w	r1, r2, lsl #2
    if (ValBit(wIndex0, 7))
 8001444:	f010 0f80 	tst.w	r0, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001448:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
 800144c:	f500 42b8 	add.w	r2, r0, #23552	; 0x5c00
 8001450:	6811      	ldr	r1, [r2, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001452:	d003      	beq.n	800145c <Standard_GetStatus+0x70>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001454:	f001 0230 	and.w	r2, r1, #48	; 0x30
 8001458:	2a10      	cmp	r2, #16
 800145a:	e003      	b.n	8001464 <Standard_GetStatus+0x78>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800145c:	f401 5040 	and.w	r0, r1, #12288	; 0x3000
 8001460:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001464:	d101      	bne.n	800146a <Standard_GetStatus+0x7e>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 8001466:	2101      	movs	r1, #1
 8001468:	7019      	strb	r1, [r3, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <Standard_GetStatus+0x98>)
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	6901      	ldr	r1, [r0, #16]
 8001470:	4788      	blx	r1
  return (uint8_t *)&StatusInfo;
 8001472:	4803      	ldr	r0, [pc, #12]	; (8001480 <Standard_GetStatus+0x94>)
 8001474:	bd08      	pop	{r3, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (uint8_t *)&StatusInfo;
 8001476:	4618      	mov	r0, r3
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 8001478:	bd08      	pop	{r3, pc}
 800147a:	bf00      	nop
 800147c:	20001320 	.word	0x20001320
 8001480:	200012f2 	.word	0x200012f2
 8001484:	2000131c 	.word	0x2000131c

08001488 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8001488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <DataStageIn+0x8c>)
 800148c:	681c      	ldr	r4, [r3, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 800148e:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 8001490:	7a26      	ldrb	r6, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8001492:	b9ab      	cbnz	r3, 80014c0 <DataStageIn+0x38>
 8001494:	2e04      	cmp	r6, #4
 8001496:	d113      	bne.n	80014c0 <DataStageIn+0x38>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8001498:	481f      	ldr	r0, [pc, #124]	; (8001518 <DataStageIn+0x90>)
 800149a:	4920      	ldr	r1, [pc, #128]	; (800151c <DataStageIn+0x94>)
 800149c:	7802      	ldrb	r2, [r0, #0]
 800149e:	2a01      	cmp	r2, #1
 80014a0:	d10a      	bne.n	80014b8 <DataStageIn+0x30>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80014a2:	4c1f      	ldr	r4, [pc, #124]	; (8001520 <DataStageIn+0x98>)
 80014a4:	6822      	ldr	r2, [r4, #0]
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80014a6:	b294      	uxth	r4, r2
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80014a8:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <DataStageIn+0x9c>)
 80014aa:	18a2      	adds	r2, r4, r2
 80014ac:	0052      	lsls	r2, r2, #1
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	2230      	movs	r2, #48	; 0x30
 80014b2:	800a      	strh	r2, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80014b4:	7003      	strb	r3, [r0, #0]
 80014b6:	e028      	b.n	800150a <DataStageIn+0x82>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 80014b8:	2610      	movs	r6, #16
 80014ba:	800e      	strh	r6, [r1, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 80014bc:	2607      	movs	r6, #7
 80014be:	e024      	b.n	800150a <DataStageIn+0x82>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80014c0:	8aa5      	ldrh	r5, [r4, #20]
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80014c2:	69a1      	ldr	r1, [r4, #24]
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 80014c4:	42ab      	cmp	r3, r5
 80014c6:	bf8c      	ite	hi
 80014c8:	2602      	movhi	r6, #2
 80014ca:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80014cc:	429d      	cmp	r5, r3
 80014ce:	bf28      	it	cs
 80014d0:	461d      	movcs	r5, r3
 80014d2:	4628      	mov	r0, r5
 80014d4:	4788      	blx	r1
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <DataStageIn+0xa0>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80014d8:	4607      	mov	r7, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 80014da:	2000      	movs	r0, #0
 80014dc:	4790      	blx	r2
 80014de:	462a      	mov	r2, r5
 80014e0:	4601      	mov	r1, r0
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <DataStageIn+0xa4>)
 80014e4:	4638      	mov	r0, r7
 80014e6:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 80014e8:	4629      	mov	r1, r5
 80014ea:	2000      	movs	r0, #0
 80014ec:	4a10      	ldr	r2, [pc, #64]	; (8001530 <DataStageIn+0xa8>)
 80014ee:	4790      	blx	r2

  pEPinfo->Usb_wLength -= Length;
 80014f0:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 80014f2:	8a63      	ldrh	r3, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 80014f4:	1b41      	subs	r1, r0, r5
  pEPinfo->Usb_wOffset += Length;
 80014f6:	18ed      	adds	r5, r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 80014f8:	4808      	ldr	r0, [pc, #32]	; (800151c <DataStageIn+0x94>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <DataStageIn+0xac>)
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 80014fc:	8221      	strh	r1, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 80014fe:	2230      	movs	r2, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001500:	f44f 5140 	mov.w	r1, #12288	; 0x3000

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8001504:	8002      	strh	r2, [r0, #0]
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8001506:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001508:	8019      	strh	r1, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800150a:	4b02      	ldr	r3, [pc, #8]	; (8001514 <DataStageIn+0x8c>)
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	7206      	strb	r6, [r0, #8]
 8001510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001512:	bf00      	nop
 8001514:	20001320 	.word	0x20001320
 8001518:	200002c8 	.word	0x200002c8
 800151c:	20001328 	.word	0x20001328
 8001520:	40005c50 	.word	0x40005c50
 8001524:	20003002 	.word	0x20003002
 8001528:	08001e65 	.word	0x08001e65
 800152c:	08001c89 	.word	0x08001c89
 8001530:	08001e9d 	.word	0x08001e9d
 8001534:	20001326 	.word	0x20001326

08001538 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8001538:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800153c:	490a      	ldr	r1, [pc, #40]	; (8001568 <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	784b      	ldrb	r3, [r1, #1]
 8001542:	78c2      	ldrb	r2, [r0, #3]
 8001544:	4293      	cmp	r3, r2
 8001546:	d30a      	bcc.n	800155e <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001548:	7881      	ldrb	r1, [r0, #2]
 800154a:	b941      	cbnz	r1, 800155e <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 800154c:	8884      	ldrh	r4, [r0, #4]
 800154e:	b934      	cbnz	r4, 800155e <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8001550:	7282      	strb	r2, [r0, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <Standard_SetConfiguration+0x34>)
 8001554:	6802      	ldr	r2, [r0, #0]
 8001556:	6853      	ldr	r3, [r2, #4]
 8001558:	4798      	blx	r3
    return USB_SUCCESS;
 800155a:	4620      	mov	r0, r4
 800155c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 800155e:	2002      	movs	r0, #2
  }
}
 8001560:	bd10      	pop	{r4, pc}
 8001562:	bf00      	nop
 8001564:	20001320 	.word	0x20001320
 8001568:	200000e0 	.word	0x200000e0
 800156c:	2000131c 	.word	0x2000131c

08001570 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8001570:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <Standard_SetInterface+0x3c>)
 8001574:	4c0e      	ldr	r4, [pc, #56]	; (80015b0 <Standard_SetInterface+0x40>)
 8001576:	6810      	ldr	r0, [r2, #0]
 8001578:	6823      	ldr	r3, [r4, #0]
 800157a:	6982      	ldr	r2, [r0, #24]
 800157c:	78d9      	ldrb	r1, [r3, #3]
 800157e:	7958      	ldrb	r0, [r3, #5]
 8001580:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 8001582:	6821      	ldr	r1, [r4, #0]
 8001584:	7a8b      	ldrb	r3, [r1, #10]
 8001586:	b17b      	cbz	r3, 80015a8 <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8001588:	b970      	cbnz	r0, 80015a8 <Standard_SetInterface+0x38>
 800158a:	7908      	ldrb	r0, [r1, #4]
 800158c:	b960      	cbnz	r0, 80015a8 <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 800158e:	788d      	ldrb	r5, [r1, #2]
 8001590:	b955      	cbnz	r5, 80015a8 <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <Standard_SetInterface+0x44>)
 8001594:	6811      	ldr	r1, [r2, #0]
 8001596:	68cb      	ldr	r3, [r1, #12]
 8001598:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800159a:	6820      	ldr	r0, [r4, #0]
 800159c:	7942      	ldrb	r2, [r0, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800159e:	78c1      	ldrb	r1, [r0, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80015a0:	72c2      	strb	r2, [r0, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80015a2:	7301      	strb	r1, [r0, #12]
      return USB_SUCCESS;
 80015a4:	4628      	mov	r0, r5
 80015a6:	bd38      	pop	{r3, r4, r5, pc}
    }

  }

  return USB_UNSUPPORT;
 80015a8:	2002      	movs	r0, #2
}
 80015aa:	bd38      	pop	{r3, r4, r5, pc}
 80015ac:	200012f8 	.word	0x200012f8
 80015b0:	20001320 	.word	0x20001320
 80015b4:	2000131c 	.word	0x2000131c

080015b8 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 80015b8:	b510      	push	{r4, lr}
  uint32_t     Type_Rec = Type_Recipient;
 80015ba:	4b32      	ldr	r3, [pc, #200]	; (8001684 <Standard_ClearFeature+0xcc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80015c0:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80015c4:	d104      	bne.n	80015d0 <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 80015c6:	7a59      	ldrb	r1, [r3, #9]
 80015c8:	f021 0220 	bic.w	r2, r1, #32
 80015cc:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 80015ce:	bd10      	pop	{r4, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80015d0:	2802      	cmp	r0, #2
 80015d2:	d155      	bne.n	8001680 <Standard_ClearFeature+0xc8>
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 80015d4:	885a      	ldrh	r2, [r3, #2]
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d153      	bne.n	8001682 <Standard_ClearFeature+0xca>
        || (pInformation->USBwIndex1 != 0))
 80015da:	7919      	ldrb	r1, [r3, #4]
 80015dc:	2900      	cmp	r1, #0
 80015de:	d150      	bne.n	8001682 <Standard_ClearFeature+0xca>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 80015e0:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 80015e2:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 80015e6:	ea4f 0480 	mov.w	r4, r0, lsl #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80015ea:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 80015ee:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 80015f2:	6821      	ldr	r1, [r4, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80015f4:	4c24      	ldr	r4, [pc, #144]	; (8001688 <Standard_ClearFeature+0xd0>)
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 80015f6:	f012 0f80 	tst.w	r2, #128	; 0x80
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80015fa:	7824      	ldrb	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80015fc:	bf14      	ite	ne
 80015fe:	f001 0130 	andne.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8001602:	f401 5140 	andeq.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001606:	42a0      	cmp	r0, r4
 8001608:	d23a      	bcs.n	8001680 <Standard_ClearFeature+0xc8>
 800160a:	2900      	cmp	r1, #0
 800160c:	d038      	beq.n	8001680 <Standard_ClearFeature+0xc8>
        || (pInformation->Current_Configuration == 0))
 800160e:	7a9b      	ldrb	r3, [r3, #10]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d035      	beq.n	8001680 <Standard_ClearFeature+0xc8>
 8001614:	0084      	lsls	r4, r0, #2
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001616:	f002 0280 	and.w	r2, r2, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800161a:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 800161e:	b2d1      	uxtb	r1, r2
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001620:	f503 44b8 	add.w	r4, r3, #23552	; 0x5c00
 8001624:	6822      	ldr	r2, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001626:	b161      	cbz	r1, 8001642 <Standard_ClearFeature+0x8a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001628:	f002 0130 	and.w	r1, r2, #48	; 0x30
 800162c:	2910      	cmp	r1, #16
 800162e:	d121      	bne.n	8001674 <Standard_ClearFeature+0xbc>
      {
        ClearDTOG_TX(Related_Endpoint);
 8001630:	b2c4      	uxtb	r4, r0
 8001632:	4620      	mov	r0, r4
 8001634:	4a15      	ldr	r2, [pc, #84]	; (800168c <Standard_ClearFeature+0xd4>)
 8001636:	4790      	blx	r2
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8001638:	4620      	mov	r0, r4
 800163a:	2130      	movs	r1, #48	; 0x30
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <Standard_ClearFeature+0xd8>)
 800163e:	4798      	blx	r3
 8001640:	e018      	b.n	8001674 <Standard_ClearFeature+0xbc>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001642:	f402 5140 	and.w	r1, r2, #12288	; 0x3000
 8001646:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800164a:	d113      	bne.n	8001674 <Standard_ClearFeature+0xbc>
      {
        if (Related_Endpoint == ENDP0)
 800164c:	b928      	cbnz	r0, 800165a <Standard_ClearFeature+0xa2>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 800164e:	4a11      	ldr	r2, [pc, #68]	; (8001694 <Standard_ClearFeature+0xdc>)
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <Standard_ClearFeature+0xe0>)
 8001652:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8001656:	4798      	blx	r3
 8001658:	e001      	b.n	800165e <Standard_ClearFeature+0xa6>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <Standard_ClearFeature+0xe4>)
 800165c:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800165e:	6820      	ldr	r0, [r4, #0]
 8001660:	f64b 718f 	movw	r1, #49039	; 0xbf8f
 8001664:	4001      	ands	r1, r0
 8001666:	f481 5240 	eor.w	r2, r1, #12288	; 0x3000
 800166a:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800166e:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 8001672:	6020      	str	r0, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8001674:	480a      	ldr	r0, [pc, #40]	; (80016a0 <Standard_ClearFeature+0xe8>)
 8001676:	6801      	ldr	r1, [r0, #0]
 8001678:	694a      	ldr	r2, [r1, #20]
 800167a:	4790      	blx	r2
    return USB_SUCCESS;
 800167c:	2000      	movs	r0, #0
 800167e:	bd10      	pop	{r4, pc}
  }

  return USB_UNSUPPORT;
 8001680:	2002      	movs	r0, #2
}
 8001682:	bd10      	pop	{r4, pc}
 8001684:	20001320 	.word	0x20001320
 8001688:	200000e0 	.word	0x200000e0
 800168c:	08001dff 	.word	0x08001dff
 8001690:	08001d05 	.word	0x08001d05
 8001694:	2000005c 	.word	0x2000005c
 8001698:	08001eb9 	.word	0x08001eb9
 800169c:	08001ddb 	.word	0x08001ddb
 80016a0:	2000131c 	.word	0x2000131c

080016a4 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 80016a4:	b510      	push	{r4, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <Standard_SetEndPointFeature+0x80>)
 80016a8:	6819      	ldr	r1, [r3, #0]
 80016aa:	794a      	ldrb	r2, [r1, #5]
  rEP = wIndex0 & ~0x80;
 80016ac:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80016b0:	ea4f 0083 	mov.w	r0, r3, lsl #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80016b4:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
 80016b8:	f504 40b8 	add.w	r0, r4, #23552	; 0x5c00
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80016bc:	4c1a      	ldr	r4, [pc, #104]	; (8001728 <Standard_SetEndPointFeature+0x84>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80016be:	6800      	ldr	r0, [r0, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80016c0:	7824      	ldrb	r4, [r4, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 80016c2:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80016c6:	bf14      	ite	ne
 80016c8:	f000 0030 	andne.w	r0, r0, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80016cc:	f400 5040 	andeq.w	r0, r0, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80016d0:	42a3      	cmp	r3, r4
 80016d2:	d224      	bcs.n	800171e <Standard_SetEndPointFeature+0x7a>
      || pInformation->USBwValue != 0 || Status == 0
 80016d4:	884c      	ldrh	r4, [r1, #2]
 80016d6:	bb14      	cbnz	r4, 800171e <Standard_SetEndPointFeature+0x7a>
 80016d8:	b308      	cbz	r0, 800171e <Standard_SetEndPointFeature+0x7a>
      || pInformation->Current_Configuration == 0)
 80016da:	7a89      	ldrb	r1, [r1, #10]
 80016dc:	b1f9      	cbz	r1, 800171e <Standard_SetEndPointFeature+0x7a>
 80016de:	009b      	lsls	r3, r3, #2
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80016e0:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80016e4:	f002 0280 	and.w	r2, r2, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80016e8:	f501 43b8 	add.w	r3, r1, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80016ec:	b2d0      	uxtb	r0, r2
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80016ee:	6819      	ldr	r1, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80016f0:	b128      	cbz	r0, 80016fe <Standard_SetEndPointFeature+0x5a>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80016f2:	f648 72bf 	movw	r2, #36799	; 0x8fbf
 80016f6:	400a      	ands	r2, r1
 80016f8:	f082 0010 	eor.w	r0, r2, #16
 80016fc:	e004      	b.n	8001708 <Standard_SetEndPointFeature+0x64>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 80016fe:	f64b 728f 	movw	r2, #49039	; 0xbf8f
 8001702:	400a      	ands	r2, r1
 8001704:	f482 5080 	eor.w	r0, r2, #4096	; 0x1000
 8001708:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
 800170c:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8001710:	6018      	str	r0, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <Standard_SetEndPointFeature+0x88>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	6991      	ldr	r1, [r2, #24]
 8001718:	4788      	blx	r1
  return USB_SUCCESS;
 800171a:	2000      	movs	r0, #0
 800171c:	bd10      	pop	{r4, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 800171e:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8001720:	bd10      	pop	{r4, pc}
 8001722:	bf00      	nop
 8001724:	20001320 	.word	0x20001320
 8001728:	200000e0 	.word	0x200000e0
 800172c:	2000131c 	.word	0x2000131c

08001730 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 8001730:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <Standard_SetDeviceFeature+0x1c>)
 8001734:	6818      	ldr	r0, [r3, #0]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <Standard_SetDeviceFeature+0x20>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8001738:	7a42      	ldrb	r2, [r0, #9]
 800173a:	f042 0120 	orr.w	r1, r2, #32
 800173e:	7241      	strb	r1, [r0, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	69c2      	ldr	r2, [r0, #28]
 8001744:	4790      	blx	r2
  return USB_SUCCESS;
}
 8001746:	2000      	movs	r0, #0
 8001748:	bd08      	pop	{r3, pc}
 800174a:	bf00      	nop
 800174c:	20001320 	.word	0x20001320
 8001750:	2000131c 	.word	0x2000131c

08001754 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <Standard_GetDescriptorData+0x18>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 800175a:	b918      	cbnz	r0, 8001764 <Standard_GetDescriptorData+0x10>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800175c:	8889      	ldrh	r1, [r1, #4]
 800175e:	1acb      	subs	r3, r1, r3
 8001760:	8213      	strh	r3, [r2, #16]
    return 0;
 8001762:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 8001764:	6808      	ldr	r0, [r1, #0]
 8001766:	18c0      	adds	r0, r0, r3
}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20001320 	.word	0x20001320

08001770 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8001770:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <Post0_Process+0x30>)
 8001774:	2000      	movs	r0, #0
 8001776:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <Post0_Process+0x34>)
 800177c:	4790      	blx	r2

  if (pInformation->ControlState == STALLED)
 800177e:	480a      	ldr	r0, [pc, #40]	; (80017a8 <Post0_Process+0x38>)
 8001780:	6801      	ldr	r1, [r0, #0]
 8001782:	7a08      	ldrb	r0, [r1, #8]
 8001784:	2808      	cmp	r0, #8
 8001786:	d106      	bne.n	8001796 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <Post0_Process+0x3c>)
 800178a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800178e:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <Post0_Process+0x40>)
 8001792:	2110      	movs	r1, #16
 8001794:	8011      	strh	r1, [r2, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 8001796:	f1b0 0309 	subs.w	r3, r0, #9
 800179a:	4258      	negs	r0, r3
 800179c:	4158      	adcs	r0, r3
 800179e:	bd08      	pop	{r3, pc}
 80017a0:	2000005c 	.word	0x2000005c
 80017a4:	08001eb9 	.word	0x08001eb9
 80017a8:	20001320 	.word	0x20001320
 80017ac:	20001326 	.word	0x20001326
 80017b0:	20001328 	.word	0x20001328

080017b4 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 80017b4:	b570      	push	{r4, r5, r6, lr}
  uint32_t ControlState = pInformation->ControlState;
 80017b6:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <Out0_Process+0xbc>)
 80017b8:	681c      	ldr	r4, [r3, #0]
 80017ba:	7a20      	ldrb	r0, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80017bc:	2802      	cmp	r0, #2
 80017be:	d04f      	beq.n	8001860 <Out0_Process+0xac>
 80017c0:	2804      	cmp	r0, #4
 80017c2:	d04d      	beq.n	8001860 <Out0_Process+0xac>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 80017c4:	2803      	cmp	r0, #3
 80017c6:	d001      	beq.n	80017cc <Out0_Process+0x18>
 80017c8:	2805      	cmp	r0, #5
 80017ca:	d143      	bne.n	8001854 <Out0_Process+0xa0>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 80017cc:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 80017ce:	8a20      	ldrh	r0, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 80017d0:	b1a9      	cbz	r1, 80017fe <Out0_Process+0x4a>
 80017d2:	b1a0      	cbz	r0, 80017fe <Out0_Process+0x4a>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 80017d4:	8aa5      	ldrh	r5, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80017d6:	4285      	cmp	r5, r0
 80017d8:	bf28      	it	cs
 80017da:	4605      	movcs	r5, r0
 80017dc:	4628      	mov	r0, r5
 80017de:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
 80017e0:	8a22      	ldrh	r2, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80017e2:	4606      	mov	r6, r0
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 80017e4:	8a60      	ldrh	r0, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 80017e6:	1b53      	subs	r3, r2, r5
    pEPinfo->Usb_rOffset += Length;
 80017e8:	1829      	adds	r1, r5, r0
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 80017ea:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80017ec:	8261      	strh	r1, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80017ee:	4a21      	ldr	r2, [pc, #132]	; (8001874 <Out0_Process+0xc0>)
 80017f0:	2000      	movs	r0, #0
 80017f2:	4790      	blx	r2
 80017f4:	462a      	mov	r2, r5
 80017f6:	4601      	mov	r1, r0
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <Out0_Process+0xc4>)
 80017fa:	4630      	mov	r0, r6
 80017fc:	4798      	blx	r3

  }

  if (pEPinfo->Usb_rLength != 0)
 80017fe:	8a20      	ldrh	r0, [r4, #16]
 8001800:	b150      	cbz	r0, 8001818 <Out0_Process+0x64>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001802:	4a1e      	ldr	r2, [pc, #120]	; (800187c <Out0_Process+0xc8>)
    SetEPTxCount(ENDP0, 0);
 8001804:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001806:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800180a:	8011      	strh	r1, [r2, #0]
    SetEPTxCount(ENDP0, 0);
 800180c:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <Out0_Process+0xcc>)
 800180e:	4601      	mov	r1, r0
 8001810:	4798      	blx	r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8001812:	491c      	ldr	r1, [pc, #112]	; (8001884 <Out0_Process+0xd0>)
 8001814:	2030      	movs	r0, #48	; 0x30
 8001816:	8008      	strh	r0, [r1, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8001818:	8a23      	ldrh	r3, [r4, #16]
 800181a:	8aa2      	ldrh	r2, [r4, #20]
 800181c:	4814      	ldr	r0, [pc, #80]	; (8001870 <Out0_Process+0xbc>)
 800181e:	429a      	cmp	r2, r3
 8001820:	d802      	bhi.n	8001828 <Out0_Process+0x74>
  {
    pInformation->ControlState = OUT_DATA;
 8001822:	6801      	ldr	r1, [r0, #0]
 8001824:	2203      	movs	r2, #3
 8001826:	e002      	b.n	800182e <Out0_Process+0x7a>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8001828:	b11b      	cbz	r3, 8001832 <Out0_Process+0x7e>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 800182a:	6801      	ldr	r1, [r0, #0]
 800182c:	2205      	movs	r2, #5
 800182e:	720a      	strb	r2, [r1, #8]
 8001830:	e00c      	b.n	800184c <Out0_Process+0x98>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8001832:	6802      	ldr	r2, [r0, #0]
 8001834:	2106      	movs	r1, #6
      USB_StatusIn();
 8001836:	4814      	ldr	r0, [pc, #80]	; (8001888 <Out0_Process+0xd4>)
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8001838:	7211      	strb	r1, [r2, #8]
      USB_StatusIn();
 800183a:	6802      	ldr	r2, [r0, #0]
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <Out0_Process+0xd8>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800183e:	b291      	uxth	r1, r2
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 8001840:	180a      	adds	r2, r1, r0
 8001842:	0051      	lsls	r1, r2, #1
 8001844:	600b      	str	r3, [r1, #0]
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <Out0_Process+0xd0>)
 8001848:	2030      	movs	r0, #48	; 0x30
 800184a:	8018      	strh	r0, [r3, #0]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <Out0_Process+0xbc>)
 800184e:	6803      	ldr	r3, [r0, #0]
 8001850:	7a19      	ldrb	r1, [r3, #8]
 8001852:	e006      	b.n	8001862 <Out0_Process+0xae>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8001854:	2807      	cmp	r0, #7
 8001856:	d103      	bne.n	8001860 <Out0_Process+0xac>
  {
    (*pProperty->Process_Status_OUT)();
 8001858:	490d      	ldr	r1, [pc, #52]	; (8001890 <Out0_Process+0xdc>)
 800185a:	680a      	ldr	r2, [r1, #0]
 800185c:	68d3      	ldr	r3, [r2, #12]
 800185e:	4798      	blx	r3
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 8001860:	2108      	movs	r1, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8001862:	4a03      	ldr	r2, [pc, #12]	; (8001870 <Out0_Process+0xbc>)

  return Post0_Process();
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <Out0_Process+0xe0>)
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8001866:	6810      	ldr	r0, [r2, #0]
 8001868:	7201      	strb	r1, [r0, #8]

  return Post0_Process();
 800186a:	4798      	blx	r3
}
 800186c:	bd70      	pop	{r4, r5, r6, pc}
 800186e:	bf00      	nop
 8001870:	20001320 	.word	0x20001320
 8001874:	08001e81 	.word	0x08001e81
 8001878:	08001cb7 	.word	0x08001cb7
 800187c:	20001326 	.word	0x20001326
 8001880:	08001e9d 	.word	0x08001e9d
 8001884:	20001328 	.word	0x20001328
 8001888:	40005c50 	.word	0x40005c50
 800188c:	20003002 	.word	0x20003002
 8001890:	200012f8 	.word	0x200012f8
 8001894:	08001771 	.word	0x08001771

08001898 <Setup0_Process>:
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001898:	4b92      	ldr	r3, [pc, #584]	; (8001ae4 <Setup0_Process+0x24c>)
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800189a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4992      	ldr	r1, [pc, #584]	; (8001ae8 <Setup0_Process+0x250>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80018a0:	b290      	uxth	r0, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80018a2:	1844      	adds	r4, r0, r1

  if (pInformation->ControlState != PAUSE)
 80018a4:	4e91      	ldr	r6, [pc, #580]	; (8001aec <Setup0_Process+0x254>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80018a6:	0065      	lsls	r5, r4, #1
 80018a8:	682a      	ldr	r2, [r5, #0]

  if (pInformation->ControlState != PAUSE)
 80018aa:	6835      	ldr	r5, [r6, #0]
 80018ac:	7a2b      	ldrb	r3, [r5, #8]
 80018ae:	2b09      	cmp	r3, #9
 80018b0:	d014      	beq.n	80018dc <Setup0_Process+0x44>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80018b2:	b297      	uxth	r7, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80018b4:	0078      	lsls	r0, r7, #1
 80018b6:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 80018ba:	f501 44c0 	add.w	r4, r1, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80018be:	7822      	ldrb	r2, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 80018c0:	4f8b      	ldr	r7, [pc, #556]	; (8001af0 <Setup0_Process+0x258>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80018c2:	702a      	strb	r2, [r5, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80018c4:	7863      	ldrb	r3, [r4, #1]
 80018c6:	706b      	strb	r3, [r5, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 80018c8:	88a0      	ldrh	r0, [r4, #4]
 80018ca:	47b8      	blx	r7
 80018cc:	8068      	strh	r0, [r5, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 80018ce:	8920      	ldrh	r0, [r4, #8]
 80018d0:	6835      	ldr	r5, [r6, #0]
 80018d2:	47b8      	blx	r7
 80018d4:	80a8      	strh	r0, [r5, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 80018d6:	89a0      	ldrh	r0, [r4, #12]
 80018d8:	6831      	ldr	r1, [r6, #0]
 80018da:	80c8      	strh	r0, [r1, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80018dc:	4d83      	ldr	r5, [pc, #524]	; (8001aec <Setup0_Process+0x254>)
 80018de:	2401      	movs	r4, #1
 80018e0:	682b      	ldr	r3, [r5, #0]
  if (pInformation->USBwLength == 0)
 80018e2:	88da      	ldrh	r2, [r3, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 80018e4:	721c      	strb	r4, [r3, #8]
 80018e6:	785c      	ldrb	r4, [r3, #1]
  if (pInformation->USBwLength == 0)
 80018e8:	2a00      	cmp	r2, #0
 80018ea:	d160      	bne.n	80019ae <Setup0_Process+0x116>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80018ec:	7818      	ldrb	r0, [r3, #0]
 80018ee:	f010 027f 	ands.w	r2, r0, #127	; 0x7f
 80018f2:	d136      	bne.n	8001962 <Setup0_Process+0xca>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 80018f4:	2c09      	cmp	r4, #9
 80018f6:	d101      	bne.n	80018fc <Setup0_Process+0x64>
    {
      Result = Standard_SetConfiguration();
 80018f8:	4b7e      	ldr	r3, [pc, #504]	; (8001af4 <Setup0_Process+0x25c>)
 80018fa:	e041      	b.n	8001980 <Setup0_Process+0xe8>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 80018fc:	2c05      	cmp	r4, #5
 80018fe:	d10f      	bne.n	8001920 <Setup0_Process+0x88>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8001900:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8001904:	2900      	cmp	r1, #0
 8001906:	da01      	bge.n	800190c <Setup0_Process+0x74>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 8001908:	2108      	movs	r1, #8
 800190a:	e04c      	b.n	80019a6 <Setup0_Process+0x10e>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800190c:	7898      	ldrb	r0, [r3, #2]
 800190e:	2800      	cmp	r0, #0
 8001910:	d1fa      	bne.n	8001908 <Setup0_Process+0x70>
          || (pInformation->USBwIndex != 0)
 8001912:	889a      	ldrh	r2, [r3, #4]
 8001914:	2a00      	cmp	r2, #0
 8001916:	d1f7      	bne.n	8001908 <Setup0_Process+0x70>
          || (pInformation->Current_Configuration != 0))
 8001918:	7a9b      	ldrb	r3, [r3, #10]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d035      	beq.n	800198a <Setup0_Process+0xf2>
 800191e:	e7f3      	b.n	8001908 <Setup0_Process+0x70>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8001920:	2c03      	cmp	r4, #3
 8001922:	d10f      	bne.n	8001944 <Setup0_Process+0xac>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8001924:	78d8      	ldrb	r0, [r3, #3]
 8001926:	2801      	cmp	r0, #1
 8001928:	d007      	beq.n	800193a <Setup0_Process+0xa2>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800192a:	4973      	ldr	r1, [pc, #460]	; (8001af8 <Setup0_Process+0x260>)
 800192c:	6808      	ldr	r0, [r1, #0]
 800192e:	6942      	ldr	r2, [r0, #20]
 8001930:	4620      	mov	r0, r4
 8001932:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 8001934:	2803      	cmp	r0, #3
 8001936:	d126      	bne.n	8001986 <Setup0_Process+0xee>
 8001938:	e034      	b.n	80019a4 <Setup0_Process+0x10c>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
          && (pInformation->USBwIndex == 0))
 800193a:	889a      	ldrh	r2, [r3, #4]
 800193c:	2a00      	cmp	r2, #0
 800193e:	d1f4      	bne.n	800192a <Setup0_Process+0x92>
      {
        Result = Standard_SetDeviceFeature();
 8001940:	4b6e      	ldr	r3, [pc, #440]	; (8001afc <Setup0_Process+0x264>)
 8001942:	e01d      	b.n	8001980 <Setup0_Process+0xe8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8001944:	2c01      	cmp	r4, #1
 8001946:	d1f0      	bne.n	800192a <Setup0_Process+0x92>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8001948:	78d9      	ldrb	r1, [r3, #3]
 800194a:	2901      	cmp	r1, #1
 800194c:	d1ed      	bne.n	800192a <Setup0_Process+0x92>
          && pInformation->USBwIndex == 0
 800194e:	8898      	ldrh	r0, [r3, #4]
 8001950:	2800      	cmp	r0, #0
 8001952:	d1ea      	bne.n	800192a <Setup0_Process+0x92>
          && ValBit(pInformation->Current_Feature, 5))
 8001954:	7a5a      	ldrb	r2, [r3, #9]
 8001956:	f002 0320 	and.w	r3, r2, #32
 800195a:	b2d9      	uxtb	r1, r3
 800195c:	2900      	cmp	r1, #0
 800195e:	d0e4      	beq.n	800192a <Setup0_Process+0x92>
 8001960:	e009      	b.n	8001976 <Setup0_Process+0xde>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001962:	2a01      	cmp	r2, #1
 8001964:	d103      	bne.n	800196e <Setup0_Process+0xd6>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8001966:	2c0b      	cmp	r4, #11
 8001968:	d1df      	bne.n	800192a <Setup0_Process+0x92>
    {
      Result = Standard_SetInterface();
 800196a:	4b65      	ldr	r3, [pc, #404]	; (8001b00 <Setup0_Process+0x268>)
 800196c:	e008      	b.n	8001980 <Setup0_Process+0xe8>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800196e:	2a02      	cmp	r2, #2
 8001970:	d1db      	bne.n	800192a <Setup0_Process+0x92>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8001972:	2c01      	cmp	r4, #1
 8001974:	d101      	bne.n	800197a <Setup0_Process+0xe2>
    {
      Result = Standard_ClearFeature();
 8001976:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <Setup0_Process+0x26c>)
 8001978:	e002      	b.n	8001980 <Setup0_Process+0xe8>
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 800197a:	2c03      	cmp	r4, #3
 800197c:	d1d5      	bne.n	800192a <Setup0_Process+0x92>
    {
      Result = Standard_SetEndPointFeature();
 800197e:	4b62      	ldr	r3, [pc, #392]	; (8001b08 <Setup0_Process+0x270>)
 8001980:	4798      	blx	r3
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8001982:	b110      	cbz	r0, 800198a <Setup0_Process+0xf2>
 8001984:	e7d1      	b.n	800192a <Setup0_Process+0x92>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8001986:	2800      	cmp	r0, #0
 8001988:	d1be      	bne.n	8001908 <Setup0_Process+0x70>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 800198a:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <Setup0_Process+0x24c>)
 800198c:	4a5f      	ldr	r2, [pc, #380]	; (8001b0c <Setup0_Process+0x274>)
 800198e:	6819      	ldr	r1, [r3, #0]
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001990:	b288      	uxth	r0, r1
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8001992:	1883      	adds	r3, r0, r2
 8001994:	0059      	lsls	r1, r3, #1
 8001996:	4b5e      	ldr	r3, [pc, #376]	; (8001b10 <Setup0_Process+0x278>)
 8001998:	2000      	movs	r0, #0
 800199a:	2230      	movs	r2, #48	; 0x30
 800199c:	6008      	str	r0, [r1, #0]
 800199e:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 80019a0:	2106      	movs	r1, #6
 80019a2:	e000      	b.n	80019a6 <Setup0_Process+0x10e>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 80019a4:	2109      	movs	r1, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80019a6:	4851      	ldr	r0, [pc, #324]	; (8001aec <Setup0_Process+0x254>)
 80019a8:	6802      	ldr	r2, [r0, #0]
 80019aa:	7211      	strb	r1, [r2, #8]
 80019ac:	e0e0      	b.n	8001b70 <Setup0_Process+0x2d8>

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 80019ae:	2c06      	cmp	r4, #6
 80019b0:	d113      	bne.n	80019da <Setup0_Process+0x142>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80019b2:	781c      	ldrb	r4, [r3, #0]
 80019b4:	0661      	lsls	r1, r4, #25
 80019b6:	d17b      	bne.n	8001ab0 <Setup0_Process+0x218>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 80019b8:	789a      	ldrb	r2, [r3, #2]
 80019ba:	4b4f      	ldr	r3, [pc, #316]	; (8001af8 <Setup0_Process+0x260>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 80019bc:	2a01      	cmp	r2, #1
 80019be:	d102      	bne.n	80019c6 <Setup0_Process+0x12e>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80019c0:	681c      	ldr	r4, [r3, #0]
 80019c2:	69e3      	ldr	r3, [r4, #28]
 80019c4:	e06a      	b.n	8001a9c <Setup0_Process+0x204>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 80019c6:	2a02      	cmp	r2, #2
 80019c8:	d102      	bne.n	80019d0 <Setup0_Process+0x138>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	6a03      	ldr	r3, [r0, #32]
 80019ce:	e065      	b.n	8001a9c <Setup0_Process+0x204>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 80019d0:	2a03      	cmp	r2, #3
 80019d2:	d16d      	bne.n	8001ab0 <Setup0_Process+0x218>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 80019d4:	6819      	ldr	r1, [r3, #0]
 80019d6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80019d8:	e060      	b.n	8001a9c <Setup0_Process+0x204>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80019da:	2c00      	cmp	r4, #0
 80019dc:	d13e      	bne.n	8001a5c <Setup0_Process+0x1c4>
 80019de:	8859      	ldrh	r1, [r3, #2]
 80019e0:	2900      	cmp	r1, #0
 80019e2:	d165      	bne.n	8001ab0 <Setup0_Process+0x218>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 80019e4:	6858      	ldr	r0, [r3, #4]
 80019e6:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 80019ea:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80019ee:	d15f      	bne.n	8001ab0 <Setup0_Process+0x218>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80019f0:	781c      	ldrb	r4, [r3, #0]
 80019f2:	f014 007f 	ands.w	r0, r4, #127	; 0x7f
 80019f6:	d104      	bne.n	8001a02 <Setup0_Process+0x16a>
        && (pInformation->USBwIndex == 0))
 80019f8:	8898      	ldrh	r0, [r3, #4]
 80019fa:	2800      	cmp	r0, #0
 80019fc:	f000 80bb 	beq.w	8001b76 <Setup0_Process+0x2de>
 8001a00:	e056      	b.n	8001ab0 <Setup0_Process+0x218>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001a02:	2801      	cmp	r0, #1
 8001a04:	d10c      	bne.n	8001a20 <Setup0_Process+0x188>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8001a06:	4a3c      	ldr	r2, [pc, #240]	; (8001af8 <Setup0_Process+0x260>)
 8001a08:	7958      	ldrb	r0, [r3, #5]
 8001a0a:	6814      	ldr	r4, [r2, #0]
 8001a0c:	69a2      	ldr	r2, [r4, #24]
 8001a0e:	4790      	blx	r2
 8001a10:	2800      	cmp	r0, #0
 8001a12:	d14d      	bne.n	8001ab0 <Setup0_Process+0x218>
          && (pInformation->Current_Configuration != 0))
 8001a14:	682b      	ldr	r3, [r5, #0]
 8001a16:	7a99      	ldrb	r1, [r3, #10]
 8001a18:	2900      	cmp	r1, #0
 8001a1a:	f040 80ac 	bne.w	8001b76 <Setup0_Process+0x2de>
 8001a1e:	e047      	b.n	8001ab0 <Setup0_Process+0x218>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001a20:	2802      	cmp	r0, #2
 8001a22:	d145      	bne.n	8001ab0 <Setup0_Process+0x218>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8001a24:	795b      	ldrb	r3, [r3, #5]
 8001a26:	f003 010f 	and.w	r1, r3, #15
 8001a2a:	ea4f 0281 	mov.w	r2, r1, lsl #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001a2e:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 8001a32:	f504 40b8 	add.w	r0, r4, #23552	; 0x5c00
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001a36:	4c37      	ldr	r4, [pc, #220]	; (8001b14 <Setup0_Process+0x27c>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001a38:	6802      	ldr	r2, [r0, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001a3a:	7820      	ldrb	r0, [r4, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8001a3c:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001a40:	bf14      	ite	ne
 8001a42:	f002 0230 	andne.w	r2, r2, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8001a46:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001a4a:	4281      	cmp	r1, r0
 8001a4c:	d230      	bcs.n	8001ab0 <Setup0_Process+0x218>
 8001a4e:	f013 0f70 	tst.w	r3, #112	; 0x70
 8001a52:	d12d      	bne.n	8001ab0 <Setup0_Process+0x218>
          && (Status != 0))
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	f040 808e 	bne.w	8001b76 <Setup0_Process+0x2de>
 8001a5a:	e029      	b.n	8001ab0 <Setup0_Process+0x218>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8001a5c:	2c08      	cmp	r4, #8
 8001a5e:	d104      	bne.n	8001a6a <Setup0_Process+0x1d2>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001a60:	7819      	ldrb	r1, [r3, #0]
 8001a62:	064a      	lsls	r2, r1, #25
 8001a64:	f000 8089 	beq.w	8001b7a <Setup0_Process+0x2e2>
 8001a68:	e022      	b.n	8001ab0 <Setup0_Process+0x218>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8001a6a:	2c0a      	cmp	r4, #10
 8001a6c:	d120      	bne.n	8001ab0 <Setup0_Process+0x218>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001a6e:	7818      	ldrb	r0, [r3, #0]
 8001a70:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8001a74:	2901      	cmp	r1, #1
 8001a76:	d11b      	bne.n	8001ab0 <Setup0_Process+0x218>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8001a78:	7a9c      	ldrb	r4, [r3, #10]
 8001a7a:	b1cc      	cbz	r4, 8001ab0 <Setup0_Process+0x218>
 8001a7c:	8859      	ldrh	r1, [r3, #2]
 8001a7e:	b9b9      	cbnz	r1, 8001ab0 <Setup0_Process+0x218>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	f422 407f 	bic.w	r0, r2, #65280	; 0xff00
 8001a86:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001a8a:	d111      	bne.n	8001ab0 <Setup0_Process+0x218>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8001a8c:	4c1a      	ldr	r4, [pc, #104]	; (8001af8 <Setup0_Process+0x260>)
 8001a8e:	7958      	ldrb	r0, [r3, #5]
 8001a90:	6822      	ldr	r2, [r4, #0]
 8001a92:	6994      	ldr	r4, [r2, #24]
 8001a94:	47a0      	blx	r4
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d071      	beq.n	8001b7e <Setup0_Process+0x2e6>
 8001a9a:	e009      	b.n	8001ab0 <Setup0_Process+0x218>
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8001a9c:	b143      	cbz	r3, 8001ab0 <Setup0_Process+0x218>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001a9e:	4813      	ldr	r0, [pc, #76]	; (8001aec <Setup0_Process+0x254>)
 8001aa0:	2400      	movs	r4, #0
 8001aa2:	6801      	ldr	r1, [r0, #0]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8001aa4:	4620      	mov	r0, r4

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001aa6:	824c      	strh	r4, [r1, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001aa8:	618b      	str	r3, [r1, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8001aaa:	4798      	blx	r3
    Result = USB_SUCCESS;
 8001aac:	4620      	mov	r0, r4
 8001aae:	e00a      	b.n	8001ac6 <Setup0_Process+0x22e>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8001ab0:	4a11      	ldr	r2, [pc, #68]	; (8001af8 <Setup0_Process+0x260>)
 8001ab2:	4c0e      	ldr	r4, [pc, #56]	; (8001aec <Setup0_Process+0x254>)
 8001ab4:	6811      	ldr	r1, [r2, #0]
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	690a      	ldr	r2, [r1, #16]
 8001aba:	7858      	ldrb	r0, [r3, #1]
 8001abc:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 8001abe:	2803      	cmp	r0, #3
 8001ac0:	d101      	bne.n	8001ac6 <Setup0_Process+0x22e>
    {
      pInformation->ControlState = PAUSE;
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	e006      	b.n	8001ad4 <Setup0_Process+0x23c>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <Setup0_Process+0x254>)
 8001ac8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	8a1a      	ldrh	r2, [r3, #16]
 8001ad0:	428a      	cmp	r2, r1
 8001ad2:	d101      	bne.n	8001ad8 <Setup0_Process+0x240>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8001ad4:	2109      	movs	r1, #9
 8001ad6:	e003      	b.n	8001ae0 <Setup0_Process+0x248>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8001ad8:	2802      	cmp	r0, #2
 8001ada:	d000      	beq.n	8001ade <Setup0_Process+0x246>
 8001adc:	b9e2      	cbnz	r2, 8001b18 <Setup0_Process+0x280>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8001ade:	2108      	movs	r1, #8
 8001ae0:	7219      	strb	r1, [r3, #8]
 8001ae2:	e045      	b.n	8001b70 <Setup0_Process+0x2d8>
 8001ae4:	40005c50 	.word	0x40005c50
 8001ae8:	20003004 	.word	0x20003004
 8001aec:	20001320 	.word	0x20001320
 8001af0:	08001f15 	.word	0x08001f15
 8001af4:	08001539 	.word	0x08001539
 8001af8:	200012f8 	.word	0x200012f8
 8001afc:	08001731 	.word	0x08001731
 8001b00:	08001571 	.word	0x08001571
 8001b04:	080015b9 	.word	0x080015b9
 8001b08:	080016a5 	.word	0x080016a5
 8001b0c:	20003002 	.word	0x20003002
 8001b10:	20001328 	.word	0x20001328
 8001b14:	200000e0 	.word	0x200000e0
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8001b18:	f993 0000 	ldrsb.w	r0, [r3]
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	da21      	bge.n	8001b64 <Setup0_Process+0x2cc>
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8001b20:	88d9      	ldrh	r1, [r3, #6]
 8001b22:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8001b24:	9801      	ldr	r0, [sp, #4]
 8001b26:	4282      	cmp	r2, r0
 8001b28:	d902      	bls.n	8001b30 <Setup0_Process+0x298>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8001b2a:	9a01      	ldr	r2, [sp, #4]
 8001b2c:	821a      	strh	r2, [r3, #16]
 8001b2e:	e011      	b.n	8001b54 <Setup0_Process+0x2bc>
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8001b30:	428a      	cmp	r2, r1
 8001b32:	d20f      	bcs.n	8001b54 <Setup0_Process+0x2bc>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8001b34:	4913      	ldr	r1, [pc, #76]	; (8001b84 <Setup0_Process+0x2ec>)
 8001b36:	6808      	ldr	r0, [r1, #0]
 8001b38:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 8001b3c:	428a      	cmp	r2, r1
 8001b3e:	d201      	bcs.n	8001b44 <Setup0_Process+0x2ac>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8001b40:	2100      	movs	r1, #0
 8001b42:	e005      	b.n	8001b50 <Setup0_Process+0x2b8>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8001b44:	fb92 f0f1 	sdiv	r0, r2, r1
 8001b48:	fb01 2210 	mls	r2, r1, r0, r2
 8001b4c:	b912      	cbnz	r2, 8001b54 <Setup0_Process+0x2bc>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8001b4e:	2101      	movs	r1, #1
 8001b50:	480d      	ldr	r0, [pc, #52]	; (8001b88 <Setup0_Process+0x2f0>)
 8001b52:	7001      	strb	r1, [r0, #0]
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8001b54:	490b      	ldr	r1, [pc, #44]	; (8001b84 <Setup0_Process+0x2ec>)
 8001b56:	6808      	ldr	r0, [r1, #0]
 8001b58:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8001b5c:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <Setup0_Process+0x2f4>)
 8001b60:	4798      	blx	r3
 8001b62:	e005      	b.n	8001b70 <Setup0_Process+0x2d8>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8001b64:	2203      	movs	r2, #3
 8001b66:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <Setup0_Process+0x2f8>)
 8001b6a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001b6e:	8019      	strh	r1, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <Setup0_Process+0x2fc>)
 8001b72:	4798      	blx	r3
}
 8001b74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <Setup0_Process+0x300>)
 8001b78:	e791      	b.n	8001a9e <Setup0_Process+0x206>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <Setup0_Process+0x304>)
 8001b7c:	e78f      	b.n	8001a9e <Setup0_Process+0x206>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <Setup0_Process+0x308>)
 8001b80:	e78d      	b.n	8001a9e <Setup0_Process+0x206>
 8001b82:	bf00      	nop
 8001b84:	200012f8 	.word	0x200012f8
 8001b88:	200002c8 	.word	0x200002c8
 8001b8c:	08001489 	.word	0x08001489
 8001b90:	20001326 	.word	0x20001326
 8001b94:	08001771 	.word	0x08001771
 8001b98:	080013ed 	.word	0x080013ed
 8001b9c:	080013a5 	.word	0x080013a5
 8001ba0:	080013c9 	.word	0x080013c9

08001ba4 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8001ba4:	b570      	push	{r4, r5, r6, lr}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <SetDeviceAddress+0x38>)
 8001ba8:	781c      	ldrb	r4, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	42a3      	cmp	r3, r4
 8001bae:	d210      	bcs.n	8001bd2 <SetDeviceAddress+0x2e>
* Description    : Set the device and all the used Endpoints addresses.
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
 8001bb0:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8001bb4:	f502 55b8 	add.w	r5, r2, #5888	; 0x1700
 8001bb8:	00a9      	lsls	r1, r5, #2
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8001bba:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001bbe:	680e      	ldr	r6, [r1, #0]
 8001bc0:	f042 0580 	orr.w	r5, r2, #128	; 0x80
 8001bc4:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001bc8:	4032      	ands	r2, r6
 8001bca:	432a      	orrs	r2, r5
 8001bcc:	600a      	str	r2, [r1, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8001bce:	3301      	adds	r3, #1
 8001bd0:	e7ec      	b.n	8001bac <SetDeviceAddress+0x8>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8001bd2:	4903      	ldr	r1, [pc, #12]	; (8001be0 <SetDeviceAddress+0x3c>)
 8001bd4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001bd8:	6008      	str	r0, [r1, #0]
 8001bda:	bd70      	pop	{r4, r5, r6, pc}
 8001bdc:	200000e0 	.word	0x200000e0
 8001be0:	40005c4c 	.word	0x40005c4c

08001be4 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8001be4:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8001be6:	4913      	ldr	r1, [pc, #76]	; (8001c34 <In0_Process+0x50>)
 8001be8:	680b      	ldr	r3, [r1, #0]
 8001bea:	460c      	mov	r4, r1
 8001bec:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8001bee:	2a02      	cmp	r2, #2
 8001bf0:	d001      	beq.n	8001bf6 <In0_Process+0x12>
 8001bf2:	2a04      	cmp	r2, #4
 8001bf4:	d104      	bne.n	8001c00 <In0_Process+0x1c>
  {
    DataStageIn();
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <In0_Process+0x54>)
 8001bf8:	4798      	blx	r3
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8001bfa:	6822      	ldr	r2, [r4, #0]
 8001bfc:	7a11      	ldrb	r1, [r2, #8]
 8001bfe:	e013      	b.n	8001c28 <In0_Process+0x44>
  }

  else if (ControlState == WAIT_STATUS_IN)
 8001c00:	2a06      	cmp	r2, #6
 8001c02:	d110      	bne.n	8001c26 <In0_Process+0x42>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8001c04:	7858      	ldrb	r0, [r3, #1]
 8001c06:	2805      	cmp	r0, #5
 8001c08:	d109      	bne.n	8001c1e <In0_Process+0x3a>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8001c0a:	7819      	ldrb	r1, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8001c0c:	0648      	lsls	r0, r1, #25
 8001c0e:	d106      	bne.n	8001c1e <In0_Process+0x3a>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8001c10:	78d8      	ldrb	r0, [r3, #3]
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <In0_Process+0x58>)
 8001c14:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <In0_Process+0x5c>)
 8001c18:	6810      	ldr	r0, [r2, #0]
 8001c1a:	6a01      	ldr	r1, [r0, #32]
 8001c1c:	4788      	blx	r1
    }
    (*pProperty->Process_Status_IN)();
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <In0_Process+0x60>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	6890      	ldr	r0, [r2, #8]
 8001c24:	4780      	blx	r0
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 8001c26:	2108      	movs	r1, #8
  }

  pInformation->ControlState = ControlState;
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <In0_Process+0x50>)
 8001c2a:	6803      	ldr	r3, [r0, #0]
 8001c2c:	7219      	strb	r1, [r3, #8]

  return Post0_Process();
 8001c2e:	4906      	ldr	r1, [pc, #24]	; (8001c48 <In0_Process+0x64>)
 8001c30:	4788      	blx	r1
}
 8001c32:	bd10      	pop	{r4, pc}
 8001c34:	20001320 	.word	0x20001320
 8001c38:	08001489 	.word	0x08001489
 8001c3c:	08001ba5 	.word	0x08001ba5
 8001c40:	2000131c 	.word	0x2000131c
 8001c44:	200012f8 	.word	0x200012f8
 8001c48:	08001771 	.word	0x08001771

08001c4c <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8001c4c:	4770      	bx	lr
	...

08001c50 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8001c50:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 8001c52:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <USB_Init+0x20>)
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <USB_Init+0x24>)
  pInformation->ControlState = 2;
 8001c56:	2002      	movs	r0, #2
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8001c58:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 8001c5a:	7218      	strb	r0, [r3, #8]
  pProperty = &Device_Property;
 8001c5c:	4906      	ldr	r1, [pc, #24]	; (8001c78 <USB_Init+0x28>)
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <USB_Init+0x2c>)
  pUser_Standard_Requests = &User_Standard_Requests;
 8001c60:	4807      	ldr	r0, [pc, #28]	; (8001c80 <USB_Init+0x30>)
 8001c62:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <USB_Init+0x34>)
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8001c64:	600b      	str	r3, [r1, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8001c66:	6010      	str	r0, [r2, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4798      	blx	r3
 8001c6c:	bd08      	pop	{r3, pc}
 8001c6e:	bf00      	nop
 8001c70:	20001320 	.word	0x20001320
 8001c74:	20001300 	.word	0x20001300
 8001c78:	200012f8 	.word	0x200012f8
 8001c7c:	2000005c 	.word	0x2000005c
 8001c80:	2000008c 	.word	0x2000008c
 8001c84:	2000131c 	.word	0x2000131c

08001c88 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001c88:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8001c8a:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8001c8e:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001c92:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8001c94:	0059      	lsls	r1, r3, #1
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001c96:	1052      	asrs	r2, r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	3002      	adds	r0, #2
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d009      	beq.n	8001cb4 <UserToPMABufferCopy+0x2c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8001ca0:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8001ca4:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8001ca8:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8001cac:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	e7f2      	b.n	8001c9a <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001cb4:	bd30      	pop	{r4, r5, pc}

08001cb6 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8001cb6:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001cba:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8001cbc:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8001cbe:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8001cc2:	1052      	asrs	r2, r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8001cc4:	0064      	lsls	r4, r4, #1
  for (i = n; i != 0; i--)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d005      	beq.n	8001cd8 <PMAToUserBufferCopy+0x22>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001ccc:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8001cd0:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	e7f7      	b.n	8001cc8 <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 8001cd8:	bd10      	pop	{r4, pc}
	...

08001cdc <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8001cdc:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001ce0:	4a01      	ldr	r2, [pc, #4]	; (8001ce8 <SetBTABLE+0xc>)
 8001ce2:	4003      	ands	r3, r0
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4770      	bx	lr
 8001ce8:	40005c50 	.word	0x40005c50

08001cec <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8001cec:	0080      	lsls	r0, r0, #2
 8001cee:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001cf2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001cf6:	6810      	ldr	r0, [r2, #0]
 8001cf8:	f648 138f 	movw	r3, #35215	; 0x898f
 8001cfc:	4003      	ands	r3, r0
 8001cfe:	4319      	orrs	r1, r3
 8001d00:	6011      	str	r1, [r2, #0]
 8001d02:	4770      	bx	lr

08001d04 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8001d04:	0080      	lsls	r0, r0, #2
 8001d06:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001d0a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001d0e:	6810      	ldr	r0, [r2, #0]
 8001d10:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8001d14:	4003      	ands	r3, r0
 8001d16:	f001 0010 	and.w	r0, r1, #16
 8001d1a:	b280      	uxth	r0, r0
 8001d1c:	b908      	cbnz	r0, 8001d22 <SetEPTxStatus+0x1e>
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e001      	b.n	8001d26 <SetEPTxStatus+0x22>
 8001d22:	f083 0310 	eor.w	r3, r3, #16
 8001d26:	f001 0120 	and.w	r1, r1, #32
 8001d2a:	b288      	uxth	r0, r1
 8001d2c:	b108      	cbz	r0, 8001d32 <SetEPTxStatus+0x2e>
 8001d2e:	f083 0320 	eor.w	r3, r3, #32
 8001d32:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8001d36:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8001d3a:	6010      	str	r0, [r2, #0]
 8001d3c:	4770      	bx	lr

08001d3e <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8001d3e:	0080      	lsls	r0, r0, #2
 8001d40:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001d44:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001d48:	6810      	ldr	r0, [r2, #0]
 8001d4a:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8001d4e:	4003      	ands	r3, r0
 8001d50:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 8001d54:	b280      	uxth	r0, r0
 8001d56:	b908      	cbnz	r0, 8001d5c <SetEPRxStatus+0x1e>
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	e001      	b.n	8001d60 <SetEPRxStatus+0x22>
 8001d5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d60:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8001d64:	b288      	uxth	r0, r1
 8001d66:	b108      	cbz	r0, 8001d6c <SetEPRxStatus+0x2e>
 8001d68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d6c:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8001d70:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8001d74:	6010      	str	r0, [r2, #0]
 8001d76:	4770      	bx	lr

08001d78 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8001d78:	0080      	lsls	r0, r0, #2
 8001d7a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001d7e:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8001d82:	6801      	ldr	r1, [r0, #0]
 8001d84:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8001d88:	400b      	ands	r3, r1
 8001d8a:	f083 0230 	eor.w	r2, r3, #48	; 0x30
 8001d8e:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8001d92:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8001d96:	6003      	str	r3, [r0, #0]
 8001d98:	4770      	bx	lr

08001d9a <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8001d9a:	0080      	lsls	r0, r0, #2
 8001d9c:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001da0:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8001da4:	6801      	ldr	r1, [r0, #0]
 8001da6:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8001daa:	400b      	ands	r3, r1
 8001dac:	f483 5240 	eor.w	r2, r3, #12288	; 0x3000
 8001db0:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8001db4:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8001db8:	6003      	str	r3, [r0, #0]
 8001dba:	4770      	bx	lr

08001dbc <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8001dbc:	0080      	lsls	r0, r0, #2
 8001dbe:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001dc2:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8001dc6:	6801      	ldr	r1, [r0, #0]
 8001dc8:	f640 630f 	movw	r3, #3599	; 0xe0f
 8001dcc:	400b      	ands	r3, r1
 8001dce:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001dd2:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8001dd6:	6001      	str	r1, [r0, #0]
 8001dd8:	4770      	bx	lr

08001dda <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8001dda:	0080      	lsls	r0, r0, #2
 8001ddc:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8001de0:	f503 40b8 	add.w	r0, r3, #23552	; 0x5c00
 8001de4:	6802      	ldr	r2, [r0, #0]
 8001de6:	0451      	lsls	r1, r2, #17
 8001de8:	d508      	bpl.n	8001dfc <ClearDTOG_RX+0x22>
 8001dea:	6801      	ldr	r1, [r0, #0]
 8001dec:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001df0:	400b      	ands	r3, r1
 8001df2:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8001df6:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8001dfa:	6001      	str	r1, [r0, #0]
 8001dfc:	4770      	bx	lr

08001dfe <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8001dfe:	0080      	lsls	r0, r0, #2
 8001e00:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8001e04:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	0650      	lsls	r0, r2, #25
 8001e0c:	d508      	bpl.n	8001e20 <ClearDTOG_TX+0x22>
 8001e0e:	6819      	ldr	r1, [r3, #0]
 8001e10:	f640 700f 	movw	r0, #3855	; 0xf0f
 8001e14:	4008      	ands	r0, r1
 8001e16:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 8001e1a:	f042 01c0 	orr.w	r1, r2, #192	; 0xc0
 8001e1e:	6019      	str	r1, [r3, #0]
 8001e20:	4770      	bx	lr
	...

08001e24 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <SetEPTxAddr+0x1c>)
 8001e26:	0849      	lsrs	r1, r1, #1
 8001e28:	681a      	ldr	r2, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8001e2a:	b293      	uxth	r3, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8001e2c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001e30:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8001e34:	f502 5340 	add.w	r3, r2, #12288	; 0x3000
 8001e38:	0058      	lsls	r0, r3, #1
 8001e3a:	004a      	lsls	r2, r1, #1
 8001e3c:	6002      	str	r2, [r0, #0]
 8001e3e:	4770      	bx	lr
 8001e40:	40005c50 	.word	0x40005c50

08001e44 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <SetEPRxAddr+0x18>)
 8001e46:	0849      	lsrs	r1, r1, #1
 8001e48:	681a      	ldr	r2, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8001e4a:	b293      	uxth	r3, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8001e4c:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <SetEPRxAddr+0x1c>)
 8001e4e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001e52:	1883      	adds	r3, r0, r2
 8001e54:	0058      	lsls	r0, r3, #1
 8001e56:	004a      	lsls	r2, r1, #1
 8001e58:	6002      	str	r2, [r0, #0]
 8001e5a:	4770      	bx	lr
 8001e5c:	40005c50 	.word	0x40005c50
 8001e60:	20003004 	.word	0x20003004

08001e64 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <GetEPTxAddr+0x18>)
 8001e66:	6819      	ldr	r1, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8001e68:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8001e6a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001e6e:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 8001e72:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
 8001e76:	004a      	lsls	r2, r1, #1
}
 8001e78:	8810      	ldrh	r0, [r2, #0]
 8001e7a:	4770      	bx	lr
 8001e7c:	40005c50 	.word	0x40005c50

08001e80 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <GetEPRxAddr+0x14>)
 8001e82:	6819      	ldr	r1, [r3, #0]
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <GetEPRxAddr+0x18>)
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8001e86:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8001e88:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001e8c:	18c1      	adds	r1, r0, r3
 8001e8e:	004a      	lsls	r2, r1, #1
}
 8001e90:	8810      	ldrh	r0, [r2, #0]
 8001e92:	4770      	bx	lr
 8001e94:	40005c50 	.word	0x40005c50
 8001e98:	20003004 	.word	0x20003004

08001e9c <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <SetEPTxCount+0x14>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8001ea0:	b293      	uxth	r3, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8001ea2:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <SetEPTxCount+0x18>)
 8001ea4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001ea8:	1883      	adds	r3, r0, r2
 8001eaa:	0058      	lsls	r0, r3, #1
 8001eac:	6001      	str	r1, [r0, #0]
 8001eae:	4770      	bx	lr
 8001eb0:	40005c50 	.word	0x40005c50
 8001eb4:	20003002 	.word	0x20003002

08001eb8 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <SetEPRxCount+0x34>)
 8001eba:	681a      	ldr	r2, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8001ebc:	b293      	uxth	r3, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8001ebe:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <SetEPRxCount+0x38>)
 8001ec0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001ec4:	1883      	adds	r3, r0, r2
 8001ec6:	005a      	lsls	r2, r3, #1
 8001ec8:	293e      	cmp	r1, #62	; 0x3e
 8001eca:	d908      	bls.n	8001ede <SetEPRxCount+0x26>
 8001ecc:	094b      	lsrs	r3, r1, #5
 8001ece:	06c9      	lsls	r1, r1, #27
 8001ed0:	d101      	bne.n	8001ed6 <SetEPRxCount+0x1e>
 8001ed2:	1e58      	subs	r0, r3, #1
 8001ed4:	b283      	uxth	r3, r0
 8001ed6:	0299      	lsls	r1, r3, #10
 8001ed8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001edc:	e004      	b.n	8001ee8 <SetEPRxCount+0x30>
 8001ede:	084b      	lsrs	r3, r1, #1
 8001ee0:	07c8      	lsls	r0, r1, #31
 8001ee2:	bf48      	it	mi
 8001ee4:	3301      	addmi	r3, #1
 8001ee6:	0299      	lsls	r1, r3, #10
 8001ee8:	6011      	str	r1, [r2, #0]
 8001eea:	4770      	bx	lr
 8001eec:	40005c50 	.word	0x40005c50
 8001ef0:	20003006 	.word	0x20003006

08001ef4 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <GetEPRxCount+0x18>)
 8001ef6:	6819      	ldr	r1, [r3, #0]
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <GetEPRxCount+0x1c>)
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8001efa:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8001efc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001f00:	18c1      	adds	r1, r0, r3
 8001f02:	004a      	lsls	r2, r1, #1
 8001f04:	6810      	ldr	r0, [r2, #0]
 8001f06:	0583      	lsls	r3, r0, #22
}
 8001f08:	0d98      	lsrs	r0, r3, #22
 8001f0a:	4770      	bx	lr
 8001f0c:	40005c50 	.word	0x40005c50
 8001f10:	20003006 	.word	0x20003006

08001f14 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8001f14:	b2c3      	uxtb	r3, r0
 8001f16:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8001f18:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001f1c:	4770      	bx	lr
	...

08001f20 <USB_SIL_Init>:
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <USB_SIL_Init+0x14>)
 8001f22:	2000      	movs	r0, #0
 8001f24:	6018      	str	r0, [r3, #0]
  wInterrupt_Mask = IMR_MSK;
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <USB_SIL_Init+0x18>)
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <USB_SIL_Init+0x1c>)
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8001f2a:	f44f 4106 	mov.w	r1, #34304	; 0x8600
 8001f2e:	8011      	strh	r1, [r2, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8001f30:	6019      	str	r1, [r3, #0]
  return 0;
}
 8001f32:	4770      	bx	lr
 8001f34:	40005c44 	.word	0x40005c44
 8001f38:	20001324 	.word	0x20001324
 8001f3c:	40005c40 	.word	0x40005c40

08001f40 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8001f40:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8001f42:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <USB_SIL_Read+0x24>)
 8001f48:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8001f4a:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8001f4c:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8001f4e:	4906      	ldr	r1, [pc, #24]	; (8001f68 <USB_SIL_Read+0x28>)
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8001f50:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8001f52:	4628      	mov	r0, r5
 8001f54:	4788      	blx	r1
 8001f56:	4622      	mov	r2, r4
 8001f58:	4601      	mov	r1, r0
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <USB_SIL_Read+0x2c>)
 8001f5c:	4630      	mov	r0, r6
 8001f5e:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 8001f60:	4620      	mov	r0, r4
 8001f62:	bd70      	pop	{r4, r5, r6, pc}
 8001f64:	08001ef5 	.word	0x08001ef5
 8001f68:	08001e81 	.word	0x08001e81
 8001f6c:	08001cb7 	.word	0x08001cb7

08001f70 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8001f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint16_t wEPVal = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8001f78:	4857      	ldr	r0, [pc, #348]	; (80020d8 <CTR_LP+0x168>)
 8001f7a:	4b58      	ldr	r3, [pc, #352]	; (80020dc <CTR_LP+0x16c>)
 8001f7c:	6802      	ldr	r2, [r0, #0]
 8001f7e:	b291      	uxth	r1, r2
 8001f80:	0412      	lsls	r2, r2, #16
 8001f82:	8019      	strh	r1, [r3, #0]
 8001f84:	f140 80a6 	bpl.w	80020d4 <CTR_LP+0x164>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8001f88:	8818      	ldrh	r0, [r3, #0]
 8001f8a:	4955      	ldr	r1, [pc, #340]	; (80020e0 <CTR_LP+0x170>)
 8001f8c:	f000 020f 	and.w	r2, r0, #15
 8001f90:	700a      	strb	r2, [r1, #0]
    if (EPindex == 0)
 8001f92:	2a00      	cmp	r2, #0
 8001f94:	d16c      	bne.n	8002070 <CTR_LP+0x100>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8001f96:	4c53      	ldr	r4, [pc, #332]	; (80020e4 <CTR_LP+0x174>)
 8001f98:	6825      	ldr	r5, [r4, #0]
 8001f9a:	b2aa      	uxth	r2, r5
 8001f9c:	4d52      	ldr	r5, [pc, #328]	; (80020e8 <CTR_LP+0x178>)
 8001f9e:	802a      	strh	r2, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8001fa0:	8829      	ldrh	r1, [r5, #0]
 8001fa2:	4a52      	ldr	r2, [pc, #328]	; (80020ec <CTR_LP+0x17c>)
 8001fa4:	f001 0030 	and.w	r0, r1, #48	; 0x30
 8001fa8:	8010      	strh	r0, [r2, #0]
	    SaveRState &=  EPRX_STAT;	
 8001faa:	8829      	ldrh	r1, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8001fac:	f64b 72bf 	movw	r2, #49087	; 0xbfbf
      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
	    SaveRState &=  EPRX_STAT;	
 8001fb0:	f401 5040 	and.w	r0, r1, #12288	; 0x3000
 8001fb4:	8028      	strh	r0, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8001fb6:	6821      	ldr	r1, [r4, #0]
 8001fb8:	400a      	ands	r2, r1
 8001fba:	f482 5000 	eor.w	r0, r2, #8192	; 0x2000
 8001fbe:	f080 0120 	eor.w	r1, r0, #32
 8001fc2:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
 8001fc6:	f042 0080 	orr.w	r0, r2, #128	; 0x80
 8001fca:	6020      	str	r0, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	f003 0110 	and.w	r1, r3, #16
 8001fd2:	b28a      	uxth	r2, r1
 8001fd4:	b932      	cbnz	r2, 8001fe4 <CTR_LP+0x74>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8001fd6:	6820      	ldr	r0, [r4, #0]
 8001fd8:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8001fdc:	4003      	ands	r3, r0
 8001fde:	6023      	str	r3, [r4, #0]
        In0_Process();
 8001fe0:	4b43      	ldr	r3, [pc, #268]	; (80020f0 <CTR_LP+0x180>)
 8001fe2:	e01b      	b.n	800201c <CTR_LP+0xac>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8001fe4:	6820      	ldr	r0, [r4, #0]
 8001fe6:	b283      	uxth	r3, r0
 8001fe8:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 8001fec:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8001ff0:	f401 6200 	and.w	r2, r1, #2048	; 0x800
 8001ff4:	b290      	uxth	r0, r2
 8001ff6:	b130      	cbz	r0, 8002006 <CTR_LP+0x96>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8001ff8:	6821      	ldr	r1, [r4, #0]
 8001ffa:	f640 728f 	movw	r2, #3983	; 0xf8f
 8001ffe:	400a      	ands	r2, r1
 8002000:	6022      	str	r2, [r4, #0]
          Setup0_Process();
 8002002:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <CTR_LP+0x184>)
 8002004:	e00a      	b.n	800201c <CTR_LP+0xac>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8002006:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800200a:	b219      	sxth	r1, r3
 800200c:	2900      	cmp	r1, #0
 800200e:	dab3      	bge.n	8001f78 <CTR_LP+0x8>
        {
          _ClearEP_CTR_RX(ENDP0);
 8002010:	6822      	ldr	r2, [r4, #0]
 8002012:	f640 708f 	movw	r0, #3983	; 0xf8f
 8002016:	4010      	ands	r0, r2
          Out0_Process();
 8002018:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <CTR_LP+0x188>)
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
 800201a:	6020      	str	r0, [r4, #0]
          Out0_Process();
 800201c:	4798      	blx	r3
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800201e:	6821      	ldr	r1, [r4, #0]
 8002020:	882a      	ldrh	r2, [r5, #0]
 8002022:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8002026:	f402 5080 	and.w	r0, r2, #4096	; 0x1000
 800202a:	400b      	ands	r3, r1
 800202c:	b281      	uxth	r1, r0
 800202e:	b109      	cbz	r1, 8002034 <CTR_LP+0xc4>
 8002030:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002034:	4a2c      	ldr	r2, [pc, #176]	; (80020e8 <CTR_LP+0x178>)
 8002036:	8810      	ldrh	r0, [r2, #0]
 8002038:	f400 5100 	and.w	r1, r0, #8192	; 0x2000
 800203c:	b28a      	uxth	r2, r1
 800203e:	b10a      	cbz	r2, 8002044 <CTR_LP+0xd4>
 8002040:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002044:	4829      	ldr	r0, [pc, #164]	; (80020ec <CTR_LP+0x17c>)
 8002046:	8801      	ldrh	r1, [r0, #0]
 8002048:	f001 0210 	and.w	r2, r1, #16
 800204c:	b291      	uxth	r1, r2
 800204e:	b109      	cbz	r1, 8002054 <CTR_LP+0xe4>
 8002050:	f083 0310 	eor.w	r3, r3, #16
 8002054:	8800      	ldrh	r0, [r0, #0]
 8002056:	f000 0220 	and.w	r2, r0, #32
 800205a:	b291      	uxth	r1, r2
 800205c:	b109      	cbz	r1, 8002062 <CTR_LP+0xf2>
 800205e:	f083 0320 	eor.w	r3, r3, #32
 8002062:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 8002066:	4a1f      	ldr	r2, [pc, #124]	; (80020e4 <CTR_LP+0x174>)
 8002068:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 800206c:	6011      	str	r1, [r2, #0]
          return;
 800206e:	e031      	b.n	80020d4 <CTR_LP+0x164>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8002070:	0093      	lsls	r3, r2, #2
 8002072:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8002076:	f500 43b8 	add.w	r3, r0, #23552	; 0x5c00
 800207a:	6819      	ldr	r1, [r3, #0]
 800207c:	b288      	uxth	r0, r1
 800207e:	f8ad 0006 	strh.w	r0, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8002082:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8002086:	b208      	sxth	r0, r1
 8002088:	2800      	cmp	r0, #0
 800208a:	da09      	bge.n	80020a0 <CTR_LP+0x130>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	f640 718f 	movw	r1, #3983	; 0xf8f
 8002092:	4001      	ands	r1, r0
 8002094:	6019      	str	r1, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8002096:	4b19      	ldr	r3, [pc, #100]	; (80020fc <CTR_LP+0x18c>)
 8002098:	3a01      	subs	r2, #1
 800209a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800209e:	4780      	blx	r0

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 80020a0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80020a4:	f001 0280 	and.w	r2, r1, #128	; 0x80
 80020a8:	b293      	uxth	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f43f af64 	beq.w	8001f78 <CTR_LP+0x8>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 80020b0:	480b      	ldr	r0, [pc, #44]	; (80020e0 <CTR_LP+0x170>)
 80020b2:	7802      	ldrb	r2, [r0, #0]
 80020b4:	0091      	lsls	r1, r2, #2
 80020b6:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80020ba:	f503 41b8 	add.w	r1, r3, #23552	; 0x5c00
 80020be:	6808      	ldr	r0, [r1, #0]
 80020c0:	f648 730f 	movw	r3, #36623	; 0x8f0f
 80020c4:	4003      	ands	r3, r0
 80020c6:	600b      	str	r3, [r1, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80020c8:	490d      	ldr	r1, [pc, #52]	; (8002100 <CTR_LP+0x190>)
 80020ca:	3a01      	subs	r2, #1
 80020cc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80020d0:	4780      	blx	r0
 80020d2:	e751      	b.n	8001f78 <CTR_LP+0x8>
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 80020d4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80020d6:	bf00      	nop
 80020d8:	40005c44 	.word	0x40005c44
 80020dc:	20000af0 	.word	0x20000af0
 80020e0:	200012fc 	.word	0x200012fc
 80020e4:	40005c00 	.word	0x40005c00
 80020e8:	20001326 	.word	0x20001326
 80020ec:	20001328 	.word	0x20001328
 80020f0:	08001be5 	.word	0x08001be5
 80020f4:	08001899 	.word	0x08001899
 80020f8:	080017b5 	.word	0x080017b5
 80020fc:	20000038 	.word	0x20000038
 8002100:	2000001c 	.word	0x2000001c

08002104 <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8002104:	4a03      	ldr	r2, [pc, #12]	; (8002114 <FLASH_Unlock+0x10>)
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <FLASH_Unlock+0x14>)
  FLASH->KEYR = FLASH_KEY2;
 8002108:	f102 3088 	add.w	r0, r2, #2290649224	; 0x88888888
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 800210c:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 800210e:	6058      	str	r0, [r3, #4]
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	45670123 	.word	0x45670123
 8002118:	40022000 	.word	0x40022000

0800211c <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 800211c:	4b02      	ldr	r3, [pc, #8]	; (8002128 <FLASH_Lock+0xc>)
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	f042 0080 	orr.w	r0, r2, #128	; 0x80
 8002124:	6118      	str	r0, [r3, #16]
 8002126:	4770      	bx	lr
 8002128:	40022000 	.word	0x40022000

0800212c <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800212c:	4b01      	ldr	r3, [pc, #4]	; (8002134 <FLASH_ClearFlag+0x8>)
 800212e:	60d8      	str	r0, [r3, #12]
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40022000 	.word	0x40022000

08002138 <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <FLASH_GetStatus+0x24>)
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	07d1      	lsls	r1, r2, #31
 800213e:	d409      	bmi.n	8002154 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8002140:	68d8      	ldr	r0, [r3, #12]
 8002142:	0742      	lsls	r2, r0, #29
 8002144:	d408      	bmi.n	8002158 <FLASH_GetStatus+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8002146:	68d9      	ldr	r1, [r3, #12]
 8002148:	f011 0f10 	tst.w	r1, #16
      {
        flashstatus = FLASH_ERROR_WRP;
 800214c:	bf0c      	ite	eq
 800214e:	2004      	moveq	r0, #4
 8002150:	2003      	movne	r0, #3
 8002152:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 8002154:	2001      	movs	r0, #1
 8002156:	4770      	bx	lr
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
    { 
      flashstatus = FLASH_ERROR_PG;
 8002158:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 800215a:	4770      	bx	lr
 800215c:	40022000 	.word	0x40022000

08002160 <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8002160:	b513      	push	{r0, r1, r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <FLASH_WaitForLastOperation+0x34>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8002164:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 8002166:	4798      	blx	r3

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8002168:	2801      	cmp	r0, #1
 800216a:	d10f      	bne.n	800218c <FLASH_WaitForLastOperation+0x2c>
 800216c:	b164      	cbz	r4, 8002188 <FLASH_WaitForLastOperation+0x28>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 800216e:	2000      	movs	r0, #0
 8002170:	9001      	str	r0, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 8002172:	20ff      	movs	r0, #255	; 0xff
 8002174:	9001      	str	r0, [sp, #4]
 8002176:	9901      	ldr	r1, [sp, #4]
 8002178:	b111      	cbz	r1, 8002180 <FLASH_WaitForLastOperation+0x20>
 800217a:	9b01      	ldr	r3, [sp, #4]
 800217c:	1e58      	subs	r0, r3, #1
 800217e:	e7f9      	b.n	8002174 <FLASH_WaitForLastOperation+0x14>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
 8002180:	4a04      	ldr	r2, [pc, #16]	; (8002194 <FLASH_WaitForLastOperation+0x34>)
 8002182:	4790      	blx	r2
    Timeout--;
 8002184:	3c01      	subs	r4, #1
 8002186:	e7ef      	b.n	8002168 <FLASH_WaitForLastOperation+0x8>
  }

  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8002188:	2005      	movs	r0, #5
 800218a:	e002      	b.n	8002192 <FLASH_WaitForLastOperation+0x32>
 800218c:	2c00      	cmp	r4, #0
 800218e:	bf08      	it	eq
 8002190:	2005      	moveq	r0, #5
  }

  /* Return the operation status */
  return status;
}
 8002192:	bd1c      	pop	{r2, r3, r4, pc}
 8002194:	08002139 	.word	0x08002139

08002198 <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8002198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219a:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800219c:	4d0f      	ldr	r5, [pc, #60]	; (80021dc <FLASH_ProgramWord+0x44>)
 800219e:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 80021a0:	460f      	mov	r7, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80021a2:	47a8      	blx	r5
  
  if(status == FLASH_COMPLETE)
 80021a4:	2804      	cmp	r0, #4
 80021a6:	d117      	bne.n	80021d8 <FLASH_ProgramWord+0x40>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 80021a8:	4c0d      	ldr	r4, [pc, #52]	; (80021e0 <FLASH_ProgramWord+0x48>)
  
    *(vu16*)Address = (u16)Data;
 80021aa:	b2b9      	uxth	r1, r7
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 80021ac:	6923      	ldr	r3, [r4, #16]
 80021ae:	f043 0001 	orr.w	r0, r3, #1
 80021b2:	6120      	str	r0, [r4, #16]
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80021b4:	200f      	movs	r0, #15
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
  
    *(vu16*)Address = (u16)Data;
 80021b6:	8031      	strh	r1, [r6, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80021b8:	47a8      	blx	r5
 
    if(status == FLASH_COMPLETE)
 80021ba:	2804      	cmp	r0, #4
 80021bc:	d103      	bne.n	80021c6 <FLASH_ProgramWord+0x2e>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 80021be:	0c3f      	lsrs	r7, r7, #16
 80021c0:	8077      	strh	r7, [r6, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80021c2:	200f      	movs	r0, #15
 80021c4:	47a8      	blx	r5
        
      if(status != FLASH_BUSY)
 80021c6:	2801      	cmp	r0, #1
 80021c8:	d101      	bne.n	80021ce <FLASH_ProgramWord+0x36>
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 80021ca:	2001      	movs	r0, #1
 80021cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else
    {
      if (status != FLASH_BUSY)
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 80021ce:	6922      	ldr	r2, [r4, #16]
 80021d0:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 80021d4:	4013      	ands	r3, r2
 80021d6:	6123      	str	r3, [r4, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 80021d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021da:	bf00      	nop
 80021dc:	08002161 	.word	0x08002161
 80021e0:	40022000 	.word	0x40022000

080021e4 <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 80021e4:	b570      	push	{r4, r5, r6, lr}
 80021e6:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 80021e8:	4d0d      	ldr	r5, [pc, #52]	; (8002220 <FLASH_ErasePage+0x3c>)
 80021ea:	f640 70ff 	movw	r0, #4095	; 0xfff
 80021ee:	47a8      	blx	r5
  
  if(status == FLASH_COMPLETE)
 80021f0:	2804      	cmp	r0, #4
 80021f2:	d113      	bne.n	800221c <FLASH_ErasePage+0x38>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 80021f4:	4c0b      	ldr	r4, [pc, #44]	; (8002224 <FLASH_ErasePage+0x40>)
 80021f6:	6923      	ldr	r3, [r4, #16]
 80021f8:	f043 0002 	orr.w	r0, r3, #2
 80021fc:	6120      	str	r0, [r4, #16]
    FLASH->AR = Page_Address; 
 80021fe:	6166      	str	r6, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8002200:	6921      	ldr	r1, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8002202:	f640 70ff 	movw	r0, #4095	; 0xfff
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
 8002206:	f041 0240 	orr.w	r2, r1, #64	; 0x40
 800220a:	6122      	str	r2, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800220c:	47a8      	blx	r5

    if(status != FLASH_BUSY)
 800220e:	2801      	cmp	r0, #1
 8002210:	d004      	beq.n	800221c <FLASH_ErasePage+0x38>
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 8002212:	6921      	ldr	r1, [r4, #16]
 8002214:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 8002218:	400b      	ands	r3, r1
 800221a:	6123      	str	r3, [r4, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 800221c:	bd70      	pop	{r4, r5, r6, pc}
 800221e:	bf00      	nop
 8002220:	08002161 	.word	0x08002161
 8002224:	40022000 	.word	0x40022000
 8002228:	6f420a0d 	.word	0x6f420a0d
 800222c:	6f4c746f 	.word	0x6f4c746f
 8002230:	72656461 	.word	0x72656461
 8002234:	56203a20 	.word	0x56203a20
 8002238:	30313431 	.word	0x30313431
 800223c:	31523630 	.word	0x31523630
 8002240:	52000a0d 	.word	0x52000a0d
 8002244:	79646165 	.word	0x79646165
 8002248:	206f7420 	.word	0x206f7420
 800224c:	6e776f64 	.word	0x6e776f64
 8002250:	64616f6c 	.word	0x64616f6c
 8002254:	0a0d2e2e 	.word	0x0a0d2e2e
	...

08002259 <Virtual_Com_Port_StringVendor>:
 8002259:	004f0326 004f0052 00410043 00200020     &.O.R.O.C.A. . .
 8002269:	00200020 00200020 00200020 00200020      . . . . . . . .
 8002279:	00200020 01120020                                 . . .

0800227f <Virtual_Com_Port_DeviceDescriptor>:
 800227f:	02000112 40000002 57400483 02010200     .......@..@W....
 800228f:	03040103                                         ..

08002291 <Virtual_Com_Port_StringLangID>:
 8002291:	04090304                                ....

08002295 <Virtual_Com_Port_StringProduct>:
 8002295:	00530332 0079006b 006f0052 00650076     2.S.k.y.R.o.v.e.
 80022a5:	00200072 004f0043 0020004d 00200020     r. .C.O.M. . . .
 80022b5:	00200020 00200020 00200020 00200020      . . . . . . . .
 80022c5:	02090020                                          .

080022c7 <Virtual_Com_Port_ConfigDescriptor>:
 80022c7:	00430209 c0000102 00040932 02020100     ..C.....2.......
 80022d7:	24050001 05011000 01000124 02022404     ...$....$....$..
 80022e7:	00062405 82050701 ff000803 00010409     .$..............
 80022f7:	00000a02 03050700 00004002 02810507     .........@......
 8002307:	00000040 00000000                                @....
